/*
lcdn-deployment

LCDN Deployment API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lcdn_deployment

import (
	"encoding/json"
)

// HypercacheInstance2 HPC instance detailed read schema.
type HypercacheInstance2 struct {
	// A value that you assign to the HyperCache node to override the amount of caching memory the HyperCache node uses. Specify the value in megabytes. Recommended caching memory is 1891 megabytes out of 3783 megabytes of total memory. Improperly configuring the HyperCache caching memory can negatively affect the CDN. You should not have to override the automatically calculated memory. However, if you choose to override the caching memory, we strongly recommend that you first contact [Akamai Technical Support](https://control.akamai.com/apps/support-ui/#/contact-support).
	CachingMemoryOverrideMB *int32 `json:"cachingMemoryOverrideMB,omitempty"`
	ServiceLabels *ServiceLabelsType1 `json:"serviceLabels,omitempty"`
	// The license for a particular HyperCache instance. The minimum length is 1 and the maximum length is 32767.
	License string `json:"license"`
	// The unique fully qualified domain name for a HyperCache node.
	Hostname *string `json:"hostname,omitempty"`
	// The unique identifier for a HyperCache node.
	NodeId int32 `json:"nodeId"`
	// A value that determines the maximum client-serving interface bandwidth on a node, in megabits per second. Request Router compares the bandwidth usage for each node with the maximum configured limit to help determine node availability.
	ClientServingBandwidthLimitMbps *int32 `json:"clientServingBandwidthLimitMbps,omitempty"`
}

// NewHypercacheInstance2 instantiates a new HypercacheInstance2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHypercacheInstance2(license string, nodeId int32) *HypercacheInstance2 {
	this := HypercacheInstance2{}
	this.License = license
	this.NodeId = nodeId
	return &this
}

// NewHypercacheInstance2WithDefaults instantiates a new HypercacheInstance2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHypercacheInstance2WithDefaults() *HypercacheInstance2 {
	this := HypercacheInstance2{}
	return &this
}

// GetCachingMemoryOverrideMB returns the CachingMemoryOverrideMB field value if set, zero value otherwise.
func (o *HypercacheInstance2) GetCachingMemoryOverrideMB() int32 {
	if o == nil || o.CachingMemoryOverrideMB == nil {
		var ret int32
		return ret
	}
	return *o.CachingMemoryOverrideMB
}

// GetCachingMemoryOverrideMBOk returns a tuple with the CachingMemoryOverrideMB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HypercacheInstance2) GetCachingMemoryOverrideMBOk() (*int32, bool) {
	if o == nil || o.CachingMemoryOverrideMB == nil {
		return nil, false
	}
	return o.CachingMemoryOverrideMB, true
}

// HasCachingMemoryOverrideMB returns a boolean if a field has been set.
func (o *HypercacheInstance2) HasCachingMemoryOverrideMB() bool {
	if o != nil && o.CachingMemoryOverrideMB != nil {
		return true
	}

	return false
}

// SetCachingMemoryOverrideMB gets a reference to the given int32 and assigns it to the CachingMemoryOverrideMB field.
func (o *HypercacheInstance2) SetCachingMemoryOverrideMB(v int32) {
	o.CachingMemoryOverrideMB = &v
}

// GetServiceLabels returns the ServiceLabels field value if set, zero value otherwise.
func (o *HypercacheInstance2) GetServiceLabels() ServiceLabelsType1 {
	if o == nil || o.ServiceLabels == nil {
		var ret ServiceLabelsType1
		return ret
	}
	return *o.ServiceLabels
}

// GetServiceLabelsOk returns a tuple with the ServiceLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HypercacheInstance2) GetServiceLabelsOk() (*ServiceLabelsType1, bool) {
	if o == nil || o.ServiceLabels == nil {
		return nil, false
	}
	return o.ServiceLabels, true
}

// HasServiceLabels returns a boolean if a field has been set.
func (o *HypercacheInstance2) HasServiceLabels() bool {
	if o != nil && o.ServiceLabels != nil {
		return true
	}

	return false
}

// SetServiceLabels gets a reference to the given ServiceLabelsType1 and assigns it to the ServiceLabels field.
func (o *HypercacheInstance2) SetServiceLabels(v ServiceLabelsType1) {
	o.ServiceLabels = &v
}

// GetLicense returns the License field value
func (o *HypercacheInstance2) GetLicense() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *HypercacheInstance2) GetLicenseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *HypercacheInstance2) SetLicense(v string) {
	o.License = v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *HypercacheInstance2) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HypercacheInstance2) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *HypercacheInstance2) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *HypercacheInstance2) SetHostname(v string) {
	o.Hostname = &v
}

// GetNodeId returns the NodeId field value
func (o *HypercacheInstance2) GetNodeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *HypercacheInstance2) GetNodeIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *HypercacheInstance2) SetNodeId(v int32) {
	o.NodeId = v
}

// GetClientServingBandwidthLimitMbps returns the ClientServingBandwidthLimitMbps field value if set, zero value otherwise.
func (o *HypercacheInstance2) GetClientServingBandwidthLimitMbps() int32 {
	if o == nil || o.ClientServingBandwidthLimitMbps == nil {
		var ret int32
		return ret
	}
	return *o.ClientServingBandwidthLimitMbps
}

// GetClientServingBandwidthLimitMbpsOk returns a tuple with the ClientServingBandwidthLimitMbps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HypercacheInstance2) GetClientServingBandwidthLimitMbpsOk() (*int32, bool) {
	if o == nil || o.ClientServingBandwidthLimitMbps == nil {
		return nil, false
	}
	return o.ClientServingBandwidthLimitMbps, true
}

// HasClientServingBandwidthLimitMbps returns a boolean if a field has been set.
func (o *HypercacheInstance2) HasClientServingBandwidthLimitMbps() bool {
	if o != nil && o.ClientServingBandwidthLimitMbps != nil {
		return true
	}

	return false
}

// SetClientServingBandwidthLimitMbps gets a reference to the given int32 and assigns it to the ClientServingBandwidthLimitMbps field.
func (o *HypercacheInstance2) SetClientServingBandwidthLimitMbps(v int32) {
	o.ClientServingBandwidthLimitMbps = &v
}

func (o HypercacheInstance2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CachingMemoryOverrideMB != nil {
		toSerialize["cachingMemoryOverrideMB"] = o.CachingMemoryOverrideMB
	}
	if o.ServiceLabels != nil {
		toSerialize["serviceLabels"] = o.ServiceLabels
	}
	if true {
		toSerialize["license"] = o.License
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if true {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.ClientServingBandwidthLimitMbps != nil {
		toSerialize["clientServingBandwidthLimitMbps"] = o.ClientServingBandwidthLimitMbps
	}
	return json.Marshal(toSerialize)
}

type NullableHypercacheInstance2 struct {
	value *HypercacheInstance2
	isSet bool
}

func (v NullableHypercacheInstance2) Get() *HypercacheInstance2 {
	return v.value
}

func (v *NullableHypercacheInstance2) Set(val *HypercacheInstance2) {
	v.value = val
	v.isSet = true
}

func (v NullableHypercacheInstance2) IsSet() bool {
	return v.isSet
}

func (v *NullableHypercacheInstance2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHypercacheInstance2(val *HypercacheInstance2) *NullableHypercacheInstance2 {
	return &NullableHypercacheInstance2{value: val, isSet: true}
}

func (v NullableHypercacheInstance2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHypercacheInstance2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


