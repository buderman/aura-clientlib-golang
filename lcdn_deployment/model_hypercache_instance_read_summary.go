/*
lcdn-deployment

Aura LCDN Deployment API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lcdn_deployment

import (
	"encoding/json"
)

// HypercacheInstanceReadSummary HPC instance summary read schema.
type HypercacheInstanceReadSummary struct {
	// The unique fully qualified domain name for a HyperCache node.
	Hostname string `json:"hostname"`
	// The unique identifier for a HyperCache node.
	NodeId int32 `json:"nodeId"`
}

// NewHypercacheInstanceReadSummary instantiates a new HypercacheInstanceReadSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHypercacheInstanceReadSummary(hostname string, nodeId int32) *HypercacheInstanceReadSummary {
	this := HypercacheInstanceReadSummary{}
	this.Hostname = hostname
	this.NodeId = nodeId
	return &this
}

// NewHypercacheInstanceReadSummaryWithDefaults instantiates a new HypercacheInstanceReadSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHypercacheInstanceReadSummaryWithDefaults() *HypercacheInstanceReadSummary {
	this := HypercacheInstanceReadSummary{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *HypercacheInstanceReadSummary) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *HypercacheInstanceReadSummary) GetHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *HypercacheInstanceReadSummary) SetHostname(v string) {
	o.Hostname = v
}

// GetNodeId returns the NodeId field value
func (o *HypercacheInstanceReadSummary) GetNodeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *HypercacheInstanceReadSummary) GetNodeIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *HypercacheInstanceReadSummary) SetNodeId(v int32) {
	o.NodeId = v
}

func (o HypercacheInstanceReadSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if true {
		toSerialize["nodeId"] = o.NodeId
	}
	return json.Marshal(toSerialize)
}

type NullableHypercacheInstanceReadSummary struct {
	value *HypercacheInstanceReadSummary
	isSet bool
}

func (v NullableHypercacheInstanceReadSummary) Get() *HypercacheInstanceReadSummary {
	return v.value
}

func (v *NullableHypercacheInstanceReadSummary) Set(val *HypercacheInstanceReadSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableHypercacheInstanceReadSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableHypercacheInstanceReadSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHypercacheInstanceReadSummary(val *HypercacheInstanceReadSummary) *NullableHypercacheInstanceReadSummary {
	return &NullableHypercacheInstanceReadSummary{value: val, isSet: true}
}

func (v NullableHypercacheInstanceReadSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHypercacheInstanceReadSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


