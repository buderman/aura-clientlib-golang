/*
lcdn-deployment

LCDN Deployment API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lcdn_deployment

import (
	"encoding/json"
)

// HypercacheInstanceCollection HPC instance collection.
type HypercacheInstanceCollection struct {
	Instances []HypercacheInstance `json:"instances"`
	Page PageType `json:"page"`
}

// NewHypercacheInstanceCollection instantiates a new HypercacheInstanceCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHypercacheInstanceCollection(instances []HypercacheInstance, page PageType) *HypercacheInstanceCollection {
	this := HypercacheInstanceCollection{}
	this.Instances = instances
	this.Page = page
	return &this
}

// NewHypercacheInstanceCollectionWithDefaults instantiates a new HypercacheInstanceCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHypercacheInstanceCollectionWithDefaults() *HypercacheInstanceCollection {
	this := HypercacheInstanceCollection{}
	return &this
}

// GetInstances returns the Instances field value
func (o *HypercacheInstanceCollection) GetInstances() []HypercacheInstance {
	if o == nil {
		var ret []HypercacheInstance
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *HypercacheInstanceCollection) GetInstancesOk() (*[]HypercacheInstance, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Instances, true
}

// SetInstances sets field value
func (o *HypercacheInstanceCollection) SetInstances(v []HypercacheInstance) {
	o.Instances = v
}

// GetPage returns the Page field value
func (o *HypercacheInstanceCollection) GetPage() PageType {
	if o == nil {
		var ret PageType
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *HypercacheInstanceCollection) GetPageOk() (*PageType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *HypercacheInstanceCollection) SetPage(v PageType) {
	o.Page = v
}

func (o HypercacheInstanceCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["instances"] = o.Instances
	}
	if true {
		toSerialize["page"] = o.Page
	}
	return json.Marshal(toSerialize)
}

type NullableHypercacheInstanceCollection struct {
	value *HypercacheInstanceCollection
	isSet bool
}

func (v NullableHypercacheInstanceCollection) Get() *HypercacheInstanceCollection {
	return v.value
}

func (v *NullableHypercacheInstanceCollection) Set(val *HypercacheInstanceCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableHypercacheInstanceCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableHypercacheInstanceCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHypercacheInstanceCollection(val *HypercacheInstanceCollection) *NullableHypercacheInstanceCollection {
	return &NullableHypercacheInstanceCollection{value: val, isSet: true}
}

func (v NullableHypercacheInstanceCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHypercacheInstanceCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


