/*
lcdn-deployment

Aura LCDN Deployment API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lcdn_deployment

import (
	"encoding/json"
)

// ServiceLabelsType Service label definitions for a Request Router instance.
type ServiceLabelsType struct {
	// List of IP addresses you can specify for a node. The maximum length is 1 and the minimum length is 2048.
	ClientServing *[]string `json:"clientServing,omitempty"`
}

// NewServiceLabelsType instantiates a new ServiceLabelsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceLabelsType() *ServiceLabelsType {
	this := ServiceLabelsType{}
	return &this
}

// NewServiceLabelsTypeWithDefaults instantiates a new ServiceLabelsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceLabelsTypeWithDefaults() *ServiceLabelsType {
	this := ServiceLabelsType{}
	return &this
}

// GetClientServing returns the ClientServing field value if set, zero value otherwise.
func (o *ServiceLabelsType) GetClientServing() []string {
	if o == nil || o.ClientServing == nil {
		var ret []string
		return ret
	}
	return *o.ClientServing
}

// GetClientServingOk returns a tuple with the ClientServing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceLabelsType) GetClientServingOk() (*[]string, bool) {
	if o == nil || o.ClientServing == nil {
		return nil, false
	}
	return o.ClientServing, true
}

// HasClientServing returns a boolean if a field has been set.
func (o *ServiceLabelsType) HasClientServing() bool {
	if o != nil && o.ClientServing != nil {
		return true
	}

	return false
}

// SetClientServing gets a reference to the given []string and assigns it to the ClientServing field.
func (o *ServiceLabelsType) SetClientServing(v []string) {
	o.ClientServing = &v
}

func (o ServiceLabelsType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientServing != nil {
		toSerialize["clientServing"] = o.ClientServing
	}
	return json.Marshal(toSerialize)
}

type NullableServiceLabelsType struct {
	value *ServiceLabelsType
	isSet bool
}

func (v NullableServiceLabelsType) Get() *ServiceLabelsType {
	return v.value
}

func (v *NullableServiceLabelsType) Set(val *ServiceLabelsType) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceLabelsType) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceLabelsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceLabelsType(val *ServiceLabelsType) *NullableServiceLabelsType {
	return &NullableServiceLabelsType{value: val, isSet: true}
}

func (v NullableServiceLabelsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceLabelsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


