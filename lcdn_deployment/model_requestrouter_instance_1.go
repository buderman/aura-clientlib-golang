/*
lcdn-deployment

LCDN Deployment API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lcdn_deployment

import (
	"encoding/json"
)

// RequestrouterInstance1 Request Router instance detailed read schema.
type RequestrouterInstance1 struct {
	// The unique fully qualified domain name for a node.
	Hostname *string `json:"hostname,omitempty"`
	// The unique identifier for a Request Router node.
	NodeId int32 `json:"nodeId"`
	ServiceLabels *ServiceLabelsType `json:"serviceLabels,omitempty"`
}

// NewRequestrouterInstance1 instantiates a new RequestrouterInstance1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestrouterInstance1(nodeId int32) *RequestrouterInstance1 {
	this := RequestrouterInstance1{}
	this.NodeId = nodeId
	return &this
}

// NewRequestrouterInstance1WithDefaults instantiates a new RequestrouterInstance1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestrouterInstance1WithDefaults() *RequestrouterInstance1 {
	this := RequestrouterInstance1{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *RequestrouterInstance1) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestrouterInstance1) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *RequestrouterInstance1) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *RequestrouterInstance1) SetHostname(v string) {
	o.Hostname = &v
}

// GetNodeId returns the NodeId field value
func (o *RequestrouterInstance1) GetNodeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *RequestrouterInstance1) GetNodeIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *RequestrouterInstance1) SetNodeId(v int32) {
	o.NodeId = v
}

// GetServiceLabels returns the ServiceLabels field value if set, zero value otherwise.
func (o *RequestrouterInstance1) GetServiceLabels() ServiceLabelsType {
	if o == nil || o.ServiceLabels == nil {
		var ret ServiceLabelsType
		return ret
	}
	return *o.ServiceLabels
}

// GetServiceLabelsOk returns a tuple with the ServiceLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestrouterInstance1) GetServiceLabelsOk() (*ServiceLabelsType, bool) {
	if o == nil || o.ServiceLabels == nil {
		return nil, false
	}
	return o.ServiceLabels, true
}

// HasServiceLabels returns a boolean if a field has been set.
func (o *RequestrouterInstance1) HasServiceLabels() bool {
	if o != nil && o.ServiceLabels != nil {
		return true
	}

	return false
}

// SetServiceLabels gets a reference to the given ServiceLabelsType and assigns it to the ServiceLabels field.
func (o *RequestrouterInstance1) SetServiceLabels(v ServiceLabelsType) {
	o.ServiceLabels = &v
}

func (o RequestrouterInstance1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if true {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.ServiceLabels != nil {
		toSerialize["serviceLabels"] = o.ServiceLabels
	}
	return json.Marshal(toSerialize)
}

type NullableRequestrouterInstance1 struct {
	value *RequestrouterInstance1
	isSet bool
}

func (v NullableRequestrouterInstance1) Get() *RequestrouterInstance1 {
	return v.value
}

func (v *NullableRequestrouterInstance1) Set(val *RequestrouterInstance1) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestrouterInstance1) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestrouterInstance1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestrouterInstance1(val *RequestrouterInstance1) *NullableRequestrouterInstance1 {
	return &NullableRequestrouterInstance1{value: val, isSet: true}
}

func (v NullableRequestrouterInstance1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestrouterInstance1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


