/*
content-delivery

Aura LCDN Content Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
	"fmt"
)

// EdgeHostType Indicates whether the origin server is an `AEX` (Aura Edge eXchange) server, or `HTTP`, the default.
type EdgeHostType string

// List of edgeHostType
const (
	EDGEHOSTTYPE_HTTP EdgeHostType = "HTTP"
	EDGEHOSTTYPE_AEX EdgeHostType = "AEX"
)

// All allowed values of EdgeHostType enum
var AllowedEdgeHostTypeEnumValues = []EdgeHostType{
	"HTTP",
	"AEX",
}

func (v *EdgeHostType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EdgeHostType(value)
	for _, existing := range AllowedEdgeHostTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EdgeHostType", value)
}

// NewEdgeHostTypeFromValue returns a pointer to a valid EdgeHostType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEdgeHostTypeFromValue(v string) (*EdgeHostType, error) {
	ev := EdgeHostType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EdgeHostType: valid values are %v", v, AllowedEdgeHostTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EdgeHostType) IsValid() bool {
	for _, existing := range AllowedEdgeHostTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to edgeHostType value
func (v EdgeHostType) Ptr() *EdgeHostType {
	return &v
}

type NullableEdgeHostType struct {
	value *EdgeHostType
	isSet bool
}

func (v NullableEdgeHostType) Get() *EdgeHostType {
	return v.value
}

func (v *NullableEdgeHostType) Set(val *EdgeHostType) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeHostType) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeHostType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeHostType(val *EdgeHostType) *NullableEdgeHostType {
	return &NullableEdgeHostType{value: val, isSet: true}
}

func (v NullableEdgeHostType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeHostType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

