/*
content-delivery

Cotent Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
)

// UdpSyslogAccessLogOptionsServers Server object to send logs to.
type UdpSyslogAccessLogOptionsServers struct {
	// The name of the log format to use as the default.  The log formats are defined by the operator.
	LogFormat *string `json:"logFormat,omitempty"`
	// Server:\\<port\\> of syslog server.
	Server string `json:"server"`
}

// NewUdpSyslogAccessLogOptionsServers instantiates a new UdpSyslogAccessLogOptionsServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdpSyslogAccessLogOptionsServers(server string) *UdpSyslogAccessLogOptionsServers {
	this := UdpSyslogAccessLogOptionsServers{}
	this.Server = server
	return &this
}

// NewUdpSyslogAccessLogOptionsServersWithDefaults instantiates a new UdpSyslogAccessLogOptionsServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdpSyslogAccessLogOptionsServersWithDefaults() *UdpSyslogAccessLogOptionsServers {
	this := UdpSyslogAccessLogOptionsServers{}
	return &this
}

// GetLogFormat returns the LogFormat field value if set, zero value otherwise.
func (o *UdpSyslogAccessLogOptionsServers) GetLogFormat() string {
	if o == nil || o.LogFormat == nil {
		var ret string
		return ret
	}
	return *o.LogFormat
}

// GetLogFormatOk returns a tuple with the LogFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdpSyslogAccessLogOptionsServers) GetLogFormatOk() (*string, bool) {
	if o == nil || o.LogFormat == nil {
		return nil, false
	}
	return o.LogFormat, true
}

// HasLogFormat returns a boolean if a field has been set.
func (o *UdpSyslogAccessLogOptionsServers) HasLogFormat() bool {
	if o != nil && o.LogFormat != nil {
		return true
	}

	return false
}

// SetLogFormat gets a reference to the given string and assigns it to the LogFormat field.
func (o *UdpSyslogAccessLogOptionsServers) SetLogFormat(v string) {
	o.LogFormat = &v
}

// GetServer returns the Server field value
func (o *UdpSyslogAccessLogOptionsServers) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *UdpSyslogAccessLogOptionsServers) GetServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *UdpSyslogAccessLogOptionsServers) SetServer(v string) {
	o.Server = v
}

func (o UdpSyslogAccessLogOptionsServers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LogFormat != nil {
		toSerialize["logFormat"] = o.LogFormat
	}
	if true {
		toSerialize["server"] = o.Server
	}
	return json.Marshal(toSerialize)
}

type NullableUdpSyslogAccessLogOptionsServers struct {
	value *UdpSyslogAccessLogOptionsServers
	isSet bool
}

func (v NullableUdpSyslogAccessLogOptionsServers) Get() *UdpSyslogAccessLogOptionsServers {
	return v.value
}

func (v *NullableUdpSyslogAccessLogOptionsServers) Set(val *UdpSyslogAccessLogOptionsServers) {
	v.value = val
	v.isSet = true
}

func (v NullableUdpSyslogAccessLogOptionsServers) IsSet() bool {
	return v.isSet
}

func (v *NullableUdpSyslogAccessLogOptionsServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdpSyslogAccessLogOptionsServers(val *UdpSyslogAccessLogOptionsServers) *NullableUdpSyslogAccessLogOptionsServers {
	return &NullableUdpSyslogAccessLogOptionsServers{value: val, isSet: true}
}

func (v NullableUdpSyslogAccessLogOptionsServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdpSyslogAccessLogOptionsServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


