/*
content-delivery

Aura LCDN Content Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
	"fmt"
)

// BehaviorType - Behavior parent type
type BehaviorType struct {
	CacheControlOverride *CacheControlOverride
	CacheKeyUri *CacheKeyUri
	ChunkSize *ChunkSize
	Cors *Cors
	Dscp *Dscp
	ExcludedQueryArguments *ExcludedQueryArguments
	ExternalOriginAuth *ExternalOriginAuth
	FastcgiAuth *FastcgiAuth
	FollowRedirect *FollowRedirect
	FrontEndCache *FrontEndCache
	Http2Delivery *Http2Delivery
	HttpDelivery *HttpDelivery
	HttpsDelivery *HttpsDelivery
	LastMileAcceleration *LastMileAcceleration
	LimitRate *LimitRate
	OriginAffinityUri *OriginAffinityUri
	OriginRangeRequest *OriginRangeRequest
	OriginServer *OriginServer
	OriginServerUri *OriginServerUri
	PurgeKeyUri *PurgeKeyUri
	RamOnlyCaching *RamOnlyCaching
	SiteRedirectMode *SiteRedirectMode
	SiteRedirectType *SiteRedirectType
	StoragePartition *StoragePartition
	UdpSyslogAccessLog *UdpSyslogAccessLog
	UriSignature *UriSignature
}

// CacheControlOverrideAsBehaviorType is a convenience function that returns CacheControlOverride wrapped in BehaviorType
func CacheControlOverrideAsBehaviorType(v *CacheControlOverride) BehaviorType {
	return BehaviorType{ CacheControlOverride: v}
}

// CacheKeyUriAsBehaviorType is a convenience function that returns CacheKeyUri wrapped in BehaviorType
func CacheKeyUriAsBehaviorType(v *CacheKeyUri) BehaviorType {
	return BehaviorType{ CacheKeyUri: v}
}

// ChunkSizeAsBehaviorType is a convenience function that returns ChunkSize wrapped in BehaviorType
func ChunkSizeAsBehaviorType(v *ChunkSize) BehaviorType {
	return BehaviorType{ ChunkSize: v}
}

// CorsAsBehaviorType is a convenience function that returns Cors wrapped in BehaviorType
func CorsAsBehaviorType(v *Cors) BehaviorType {
	return BehaviorType{ Cors: v}
}

// DscpAsBehaviorType is a convenience function that returns Dscp wrapped in BehaviorType
func DscpAsBehaviorType(v *Dscp) BehaviorType {
	return BehaviorType{ Dscp: v}
}

// ExcludedQueryArgumentsAsBehaviorType is a convenience function that returns ExcludedQueryArguments wrapped in BehaviorType
func ExcludedQueryArgumentsAsBehaviorType(v *ExcludedQueryArguments) BehaviorType {
	return BehaviorType{ ExcludedQueryArguments: v}
}

// ExternalOriginAuthAsBehaviorType is a convenience function that returns ExternalOriginAuth wrapped in BehaviorType
func ExternalOriginAuthAsBehaviorType(v *ExternalOriginAuth) BehaviorType {
	return BehaviorType{ ExternalOriginAuth: v}
}

// FastcgiAuthAsBehaviorType is a convenience function that returns FastcgiAuth wrapped in BehaviorType
func FastcgiAuthAsBehaviorType(v *FastcgiAuth) BehaviorType {
	return BehaviorType{ FastcgiAuth: v}
}

// FollowRedirectAsBehaviorType is a convenience function that returns FollowRedirect wrapped in BehaviorType
func FollowRedirectAsBehaviorType(v *FollowRedirect) BehaviorType {
	return BehaviorType{ FollowRedirect: v}
}

// FrontEndCacheAsBehaviorType is a convenience function that returns FrontEndCache wrapped in BehaviorType
func FrontEndCacheAsBehaviorType(v *FrontEndCache) BehaviorType {
	return BehaviorType{ FrontEndCache: v}
}

// Http2DeliveryAsBehaviorType is a convenience function that returns Http2Delivery wrapped in BehaviorType
func Http2DeliveryAsBehaviorType(v *Http2Delivery) BehaviorType {
	return BehaviorType{ Http2Delivery: v}
}

// HttpDeliveryAsBehaviorType is a convenience function that returns HttpDelivery wrapped in BehaviorType
func HttpDeliveryAsBehaviorType(v *HttpDelivery) BehaviorType {
	return BehaviorType{ HttpDelivery: v}
}

// HttpsDeliveryAsBehaviorType is a convenience function that returns HttpsDelivery wrapped in BehaviorType
func HttpsDeliveryAsBehaviorType(v *HttpsDelivery) BehaviorType {
	return BehaviorType{ HttpsDelivery: v}
}

// LastMileAccelerationAsBehaviorType is a convenience function that returns LastMileAcceleration wrapped in BehaviorType
func LastMileAccelerationAsBehaviorType(v *LastMileAcceleration) BehaviorType {
	return BehaviorType{ LastMileAcceleration: v}
}

// LimitRateAsBehaviorType is a convenience function that returns LimitRate wrapped in BehaviorType
func LimitRateAsBehaviorType(v *LimitRate) BehaviorType {
	return BehaviorType{ LimitRate: v}
}

// OriginAffinityUriAsBehaviorType is a convenience function that returns OriginAffinityUri wrapped in BehaviorType
func OriginAffinityUriAsBehaviorType(v *OriginAffinityUri) BehaviorType {
	return BehaviorType{ OriginAffinityUri: v}
}

// OriginRangeRequestAsBehaviorType is a convenience function that returns OriginRangeRequest wrapped in BehaviorType
func OriginRangeRequestAsBehaviorType(v *OriginRangeRequest) BehaviorType {
	return BehaviorType{ OriginRangeRequest: v}
}

// OriginServerAsBehaviorType is a convenience function that returns OriginServer wrapped in BehaviorType
func OriginServerAsBehaviorType(v *OriginServer) BehaviorType {
	return BehaviorType{ OriginServer: v}
}

// OriginServerUriAsBehaviorType is a convenience function that returns OriginServerUri wrapped in BehaviorType
func OriginServerUriAsBehaviorType(v *OriginServerUri) BehaviorType {
	return BehaviorType{ OriginServerUri: v}
}

// PurgeKeyUriAsBehaviorType is a convenience function that returns PurgeKeyUri wrapped in BehaviorType
func PurgeKeyUriAsBehaviorType(v *PurgeKeyUri) BehaviorType {
	return BehaviorType{ PurgeKeyUri: v}
}

// RamOnlyCachingAsBehaviorType is a convenience function that returns RamOnlyCaching wrapped in BehaviorType
func RamOnlyCachingAsBehaviorType(v *RamOnlyCaching) BehaviorType {
	return BehaviorType{ RamOnlyCaching: v}
}

// SiteRedirectModeAsBehaviorType is a convenience function that returns SiteRedirectMode wrapped in BehaviorType
func SiteRedirectModeAsBehaviorType(v *SiteRedirectMode) BehaviorType {
	return BehaviorType{ SiteRedirectMode: v}
}

// SiteRedirectTypeAsBehaviorType is a convenience function that returns SiteRedirectType wrapped in BehaviorType
func SiteRedirectTypeAsBehaviorType(v *SiteRedirectType) BehaviorType {
	return BehaviorType{ SiteRedirectType: v}
}

// StoragePartitionAsBehaviorType is a convenience function that returns StoragePartition wrapped in BehaviorType
func StoragePartitionAsBehaviorType(v *StoragePartition) BehaviorType {
	return BehaviorType{ StoragePartition: v}
}

// UdpSyslogAccessLogAsBehaviorType is a convenience function that returns UdpSyslogAccessLog wrapped in BehaviorType
func UdpSyslogAccessLogAsBehaviorType(v *UdpSyslogAccessLog) BehaviorType {
	return BehaviorType{ UdpSyslogAccessLog: v}
}

// UriSignatureAsBehaviorType is a convenience function that returns UriSignature wrapped in BehaviorType
func UriSignatureAsBehaviorType(v *UriSignature) BehaviorType {
	return BehaviorType{ UriSignature: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BehaviorType) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'cacheControlOverride'
	if jsonDict["name"] == "cacheControlOverride" {
		// try to unmarshal JSON data into CacheControlOverride
		err = json.Unmarshal(data, &dst.CacheControlOverride)
		if err == nil {
			return nil // data stored in dst.CacheControlOverride, return on the first match
		} else {
			dst.CacheControlOverride = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as CacheControlOverride: %s", err.Error())
		}
	}

	// check if the discriminator value is 'cacheKeyUri'
	if jsonDict["name"] == "cacheKeyUri" {
		// try to unmarshal JSON data into CacheKeyUri
		err = json.Unmarshal(data, &dst.CacheKeyUri)
		if err == nil {
			return nil // data stored in dst.CacheKeyUri, return on the first match
		} else {
			dst.CacheKeyUri = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as CacheKeyUri: %s", err.Error())
		}
	}

	// check if the discriminator value is 'chunkSize'
	if jsonDict["name"] == "chunkSize" {
		// try to unmarshal JSON data into ChunkSize
		err = json.Unmarshal(data, &dst.ChunkSize)
		if err == nil {
			return nil // data stored in dst.ChunkSize, return on the first match
		} else {
			dst.ChunkSize = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as ChunkSize: %s", err.Error())
		}
	}

	// check if the discriminator value is 'cors'
	if jsonDict["name"] == "cors" {
		// try to unmarshal JSON data into Cors
		err = json.Unmarshal(data, &dst.Cors)
		if err == nil {
			return nil // data stored in dst.Cors, return on the first match
		} else {
			dst.Cors = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as Cors: %s", err.Error())
		}
	}

	// check if the discriminator value is 'dscp'
	if jsonDict["name"] == "dscp" {
		// try to unmarshal JSON data into Dscp
		err = json.Unmarshal(data, &dst.Dscp)
		if err == nil {
			return nil // data stored in dst.Dscp, return on the first match
		} else {
			dst.Dscp = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as Dscp: %s", err.Error())
		}
	}

	// check if the discriminator value is 'excludedQueryArguments'
	if jsonDict["name"] == "excludedQueryArguments" {
		// try to unmarshal JSON data into ExcludedQueryArguments
		err = json.Unmarshal(data, &dst.ExcludedQueryArguments)
		if err == nil {
			return nil // data stored in dst.ExcludedQueryArguments, return on the first match
		} else {
			dst.ExcludedQueryArguments = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as ExcludedQueryArguments: %s", err.Error())
		}
	}

	// check if the discriminator value is 'externalOriginAuth'
	if jsonDict["name"] == "externalOriginAuth" {
		// try to unmarshal JSON data into ExternalOriginAuth
		err = json.Unmarshal(data, &dst.ExternalOriginAuth)
		if err == nil {
			return nil // data stored in dst.ExternalOriginAuth, return on the first match
		} else {
			dst.ExternalOriginAuth = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as ExternalOriginAuth: %s", err.Error())
		}
	}

	// check if the discriminator value is 'fastcgiAuth'
	if jsonDict["name"] == "fastcgiAuth" {
		// try to unmarshal JSON data into FastcgiAuth
		err = json.Unmarshal(data, &dst.FastcgiAuth)
		if err == nil {
			return nil // data stored in dst.FastcgiAuth, return on the first match
		} else {
			dst.FastcgiAuth = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as FastcgiAuth: %s", err.Error())
		}
	}

	// check if the discriminator value is 'followRedirect'
	if jsonDict["name"] == "followRedirect" {
		// try to unmarshal JSON data into FollowRedirect
		err = json.Unmarshal(data, &dst.FollowRedirect)
		if err == nil {
			return nil // data stored in dst.FollowRedirect, return on the first match
		} else {
			dst.FollowRedirect = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as FollowRedirect: %s", err.Error())
		}
	}

	// check if the discriminator value is 'frontEndCache'
	if jsonDict["name"] == "frontEndCache" {
		// try to unmarshal JSON data into FrontEndCache
		err = json.Unmarshal(data, &dst.FrontEndCache)
		if err == nil {
			return nil // data stored in dst.FrontEndCache, return on the first match
		} else {
			dst.FrontEndCache = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as FrontEndCache: %s", err.Error())
		}
	}

	// check if the discriminator value is 'http2Delivery'
	if jsonDict["name"] == "http2Delivery" {
		// try to unmarshal JSON data into Http2Delivery
		err = json.Unmarshal(data, &dst.Http2Delivery)
		if err == nil {
			return nil // data stored in dst.Http2Delivery, return on the first match
		} else {
			dst.Http2Delivery = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as Http2Delivery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'httpDelivery'
	if jsonDict["name"] == "httpDelivery" {
		// try to unmarshal JSON data into HttpDelivery
		err = json.Unmarshal(data, &dst.HttpDelivery)
		if err == nil {
			return nil // data stored in dst.HttpDelivery, return on the first match
		} else {
			dst.HttpDelivery = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as HttpDelivery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'httpsDelivery'
	if jsonDict["name"] == "httpsDelivery" {
		// try to unmarshal JSON data into HttpsDelivery
		err = json.Unmarshal(data, &dst.HttpsDelivery)
		if err == nil {
			return nil // data stored in dst.HttpsDelivery, return on the first match
		} else {
			dst.HttpsDelivery = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as HttpsDelivery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'lastMileAcceleration'
	if jsonDict["name"] == "lastMileAcceleration" {
		// try to unmarshal JSON data into LastMileAcceleration
		err = json.Unmarshal(data, &dst.LastMileAcceleration)
		if err == nil {
			return nil // data stored in dst.LastMileAcceleration, return on the first match
		} else {
			dst.LastMileAcceleration = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as LastMileAcceleration: %s", err.Error())
		}
	}

	// check if the discriminator value is 'limitRate'
	if jsonDict["name"] == "limitRate" {
		// try to unmarshal JSON data into LimitRate
		err = json.Unmarshal(data, &dst.LimitRate)
		if err == nil {
			return nil // data stored in dst.LimitRate, return on the first match
		} else {
			dst.LimitRate = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as LimitRate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'originAffinityUri'
	if jsonDict["name"] == "originAffinityUri" {
		// try to unmarshal JSON data into OriginAffinityUri
		err = json.Unmarshal(data, &dst.OriginAffinityUri)
		if err == nil {
			return nil // data stored in dst.OriginAffinityUri, return on the first match
		} else {
			dst.OriginAffinityUri = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as OriginAffinityUri: %s", err.Error())
		}
	}

	// check if the discriminator value is 'originRangeRequest'
	if jsonDict["name"] == "originRangeRequest" {
		// try to unmarshal JSON data into OriginRangeRequest
		err = json.Unmarshal(data, &dst.OriginRangeRequest)
		if err == nil {
			return nil // data stored in dst.OriginRangeRequest, return on the first match
		} else {
			dst.OriginRangeRequest = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as OriginRangeRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'originServer'
	if jsonDict["name"] == "originServer" {
		// try to unmarshal JSON data into OriginServer
		err = json.Unmarshal(data, &dst.OriginServer)
		if err == nil {
			return nil // data stored in dst.OriginServer, return on the first match
		} else {
			dst.OriginServer = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as OriginServer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'originServerUri'
	if jsonDict["name"] == "originServerUri" {
		// try to unmarshal JSON data into OriginServerUri
		err = json.Unmarshal(data, &dst.OriginServerUri)
		if err == nil {
			return nil // data stored in dst.OriginServerUri, return on the first match
		} else {
			dst.OriginServerUri = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as OriginServerUri: %s", err.Error())
		}
	}

	// check if the discriminator value is 'purgeKeyUri'
	if jsonDict["name"] == "purgeKeyUri" {
		// try to unmarshal JSON data into PurgeKeyUri
		err = json.Unmarshal(data, &dst.PurgeKeyUri)
		if err == nil {
			return nil // data stored in dst.PurgeKeyUri, return on the first match
		} else {
			dst.PurgeKeyUri = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as PurgeKeyUri: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ramOnlyCaching'
	if jsonDict["name"] == "ramOnlyCaching" {
		// try to unmarshal JSON data into RamOnlyCaching
		err = json.Unmarshal(data, &dst.RamOnlyCaching)
		if err == nil {
			return nil // data stored in dst.RamOnlyCaching, return on the first match
		} else {
			dst.RamOnlyCaching = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as RamOnlyCaching: %s", err.Error())
		}
	}

	// check if the discriminator value is 'siteRedirectMode'
	if jsonDict["name"] == "siteRedirectMode" {
		// try to unmarshal JSON data into SiteRedirectMode
		err = json.Unmarshal(data, &dst.SiteRedirectMode)
		if err == nil {
			return nil // data stored in dst.SiteRedirectMode, return on the first match
		} else {
			dst.SiteRedirectMode = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as SiteRedirectMode: %s", err.Error())
		}
	}

	// check if the discriminator value is 'siteRedirectType'
	if jsonDict["name"] == "siteRedirectType" {
		// try to unmarshal JSON data into SiteRedirectType
		err = json.Unmarshal(data, &dst.SiteRedirectType)
		if err == nil {
			return nil // data stored in dst.SiteRedirectType, return on the first match
		} else {
			dst.SiteRedirectType = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as SiteRedirectType: %s", err.Error())
		}
	}

	// check if the discriminator value is 'storagePartition'
	if jsonDict["name"] == "storagePartition" {
		// try to unmarshal JSON data into StoragePartition
		err = json.Unmarshal(data, &dst.StoragePartition)
		if err == nil {
			return nil // data stored in dst.StoragePartition, return on the first match
		} else {
			dst.StoragePartition = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as StoragePartition: %s", err.Error())
		}
	}

	// check if the discriminator value is 'udpSyslogAccessLog'
	if jsonDict["name"] == "udpSyslogAccessLog" {
		// try to unmarshal JSON data into UdpSyslogAccessLog
		err = json.Unmarshal(data, &dst.UdpSyslogAccessLog)
		if err == nil {
			return nil // data stored in dst.UdpSyslogAccessLog, return on the first match
		} else {
			dst.UdpSyslogAccessLog = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as UdpSyslogAccessLog: %s", err.Error())
		}
	}

	// check if the discriminator value is 'uriSignature'
	if jsonDict["name"] == "uriSignature" {
		// try to unmarshal JSON data into UriSignature
		err = json.Unmarshal(data, &dst.UriSignature)
		if err == nil {
			return nil // data stored in dst.UriSignature, return on the first match
		} else {
			dst.UriSignature = nil
			return fmt.Errorf("Failed to unmarshal BehaviorType as UriSignature: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BehaviorType) MarshalJSON() ([]byte, error) {
	if src.CacheControlOverride != nil {
		return json.Marshal(&src.CacheControlOverride)
	}

	if src.CacheKeyUri != nil {
		return json.Marshal(&src.CacheKeyUri)
	}

	if src.ChunkSize != nil {
		return json.Marshal(&src.ChunkSize)
	}

	if src.Cors != nil {
		return json.Marshal(&src.Cors)
	}

	if src.Dscp != nil {
		return json.Marshal(&src.Dscp)
	}

	if src.ExcludedQueryArguments != nil {
		return json.Marshal(&src.ExcludedQueryArguments)
	}

	if src.ExternalOriginAuth != nil {
		return json.Marshal(&src.ExternalOriginAuth)
	}

	if src.FastcgiAuth != nil {
		return json.Marshal(&src.FastcgiAuth)
	}

	if src.FollowRedirect != nil {
		return json.Marshal(&src.FollowRedirect)
	}

	if src.FrontEndCache != nil {
		return json.Marshal(&src.FrontEndCache)
	}

	if src.Http2Delivery != nil {
		return json.Marshal(&src.Http2Delivery)
	}

	if src.HttpDelivery != nil {
		return json.Marshal(&src.HttpDelivery)
	}

	if src.HttpsDelivery != nil {
		return json.Marshal(&src.HttpsDelivery)
	}

	if src.LastMileAcceleration != nil {
		return json.Marshal(&src.LastMileAcceleration)
	}

	if src.LimitRate != nil {
		return json.Marshal(&src.LimitRate)
	}

	if src.OriginAffinityUri != nil {
		return json.Marshal(&src.OriginAffinityUri)
	}

	if src.OriginRangeRequest != nil {
		return json.Marshal(&src.OriginRangeRequest)
	}

	if src.OriginServer != nil {
		return json.Marshal(&src.OriginServer)
	}

	if src.OriginServerUri != nil {
		return json.Marshal(&src.OriginServerUri)
	}

	if src.PurgeKeyUri != nil {
		return json.Marshal(&src.PurgeKeyUri)
	}

	if src.RamOnlyCaching != nil {
		return json.Marshal(&src.RamOnlyCaching)
	}

	if src.SiteRedirectMode != nil {
		return json.Marshal(&src.SiteRedirectMode)
	}

	if src.SiteRedirectType != nil {
		return json.Marshal(&src.SiteRedirectType)
	}

	if src.StoragePartition != nil {
		return json.Marshal(&src.StoragePartition)
	}

	if src.UdpSyslogAccessLog != nil {
		return json.Marshal(&src.UdpSyslogAccessLog)
	}

	if src.UriSignature != nil {
		return json.Marshal(&src.UriSignature)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BehaviorType) GetActualInstance() (interface{}) {
	if obj.CacheControlOverride != nil {
		return obj.CacheControlOverride
	}

	if obj.CacheKeyUri != nil {
		return obj.CacheKeyUri
	}

	if obj.ChunkSize != nil {
		return obj.ChunkSize
	}

	if obj.Cors != nil {
		return obj.Cors
	}

	if obj.Dscp != nil {
		return obj.Dscp
	}

	if obj.ExcludedQueryArguments != nil {
		return obj.ExcludedQueryArguments
	}

	if obj.ExternalOriginAuth != nil {
		return obj.ExternalOriginAuth
	}

	if obj.FastcgiAuth != nil {
		return obj.FastcgiAuth
	}

	if obj.FollowRedirect != nil {
		return obj.FollowRedirect
	}

	if obj.FrontEndCache != nil {
		return obj.FrontEndCache
	}

	if obj.Http2Delivery != nil {
		return obj.Http2Delivery
	}

	if obj.HttpDelivery != nil {
		return obj.HttpDelivery
	}

	if obj.HttpsDelivery != nil {
		return obj.HttpsDelivery
	}

	if obj.LastMileAcceleration != nil {
		return obj.LastMileAcceleration
	}

	if obj.LimitRate != nil {
		return obj.LimitRate
	}

	if obj.OriginAffinityUri != nil {
		return obj.OriginAffinityUri
	}

	if obj.OriginRangeRequest != nil {
		return obj.OriginRangeRequest
	}

	if obj.OriginServer != nil {
		return obj.OriginServer
	}

	if obj.OriginServerUri != nil {
		return obj.OriginServerUri
	}

	if obj.PurgeKeyUri != nil {
		return obj.PurgeKeyUri
	}

	if obj.RamOnlyCaching != nil {
		return obj.RamOnlyCaching
	}

	if obj.SiteRedirectMode != nil {
		return obj.SiteRedirectMode
	}

	if obj.SiteRedirectType != nil {
		return obj.SiteRedirectType
	}

	if obj.StoragePartition != nil {
		return obj.StoragePartition
	}

	if obj.UdpSyslogAccessLog != nil {
		return obj.UdpSyslogAccessLog
	}

	if obj.UriSignature != nil {
		return obj.UriSignature
	}

	// all schemas are nil
	return nil
}

type NullableBehaviorType struct {
	value *BehaviorType
	isSet bool
}

func (v NullableBehaviorType) Get() *BehaviorType {
	return v.value
}

func (v *NullableBehaviorType) Set(val *BehaviorType) {
	v.value = val
	v.isSet = true
}

func (v NullableBehaviorType) IsSet() bool {
	return v.isSet
}

func (v *NullableBehaviorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBehaviorType(val *BehaviorType) *NullableBehaviorType {
	return &NullableBehaviorType{value: val, isSet: true}
}

func (v NullableBehaviorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBehaviorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


