/*
content-delivery

Cotent Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
)

// CacheKeyUriOptions This behavior's set of configuration options.
type CacheKeyUriOptions struct {
	// The cache key URI pattern without query parameters. By default, all incoming query parameters are added to the cache key URI. By default, this value is also used for the purge key URI.
	Value string `json:"value"`
}

// NewCacheKeyUriOptions instantiates a new CacheKeyUriOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheKeyUriOptions(value string) *CacheKeyUriOptions {
	this := CacheKeyUriOptions{}
	this.Value = value
	return &this
}

// NewCacheKeyUriOptionsWithDefaults instantiates a new CacheKeyUriOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheKeyUriOptionsWithDefaults() *CacheKeyUriOptions {
	this := CacheKeyUriOptions{}
	return &this
}

// GetValue returns the Value field value
func (o *CacheKeyUriOptions) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CacheKeyUriOptions) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CacheKeyUriOptions) SetValue(v string) {
	o.Value = v
}

func (o CacheKeyUriOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableCacheKeyUriOptions struct {
	value *CacheKeyUriOptions
	isSet bool
}

func (v NullableCacheKeyUriOptions) Get() *CacheKeyUriOptions {
	return v.value
}

func (v *NullableCacheKeyUriOptions) Set(val *CacheKeyUriOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheKeyUriOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheKeyUriOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheKeyUriOptions(val *CacheKeyUriOptions) *NullableCacheKeyUriOptions {
	return &NullableCacheKeyUriOptions{value: val, isSet: true}
}

func (v NullableCacheKeyUriOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheKeyUriOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


