/*
content-delivery

Aura LCDN Content Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
)

// CorsOptionsAccessControlAllowOrigin `Access-Control-Allow-Origin` header source. Enter one of `allowRequestHttpOrigin` (allow access from any origin listed in the request `Origin` header), `allowAllOrigins` (`true` implies `*`), or `allowOrigins` (list of allowed origins) as an option.
type CorsOptionsAccessControlAllowOrigin struct {
	AllowOrigins *[]string `json:"allowOrigins,omitempty"`
	AllowAllOrigins *bool `json:"allowAllOrigins,omitempty"`
	AllowRequestHttpOrigin *bool `json:"allowRequestHttpOrigin,omitempty"`
}

// NewCorsOptionsAccessControlAllowOrigin instantiates a new CorsOptionsAccessControlAllowOrigin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorsOptionsAccessControlAllowOrigin() *CorsOptionsAccessControlAllowOrigin {
	this := CorsOptionsAccessControlAllowOrigin{}
	return &this
}

// NewCorsOptionsAccessControlAllowOriginWithDefaults instantiates a new CorsOptionsAccessControlAllowOrigin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorsOptionsAccessControlAllowOriginWithDefaults() *CorsOptionsAccessControlAllowOrigin {
	this := CorsOptionsAccessControlAllowOrigin{}
	return &this
}

// GetAllowOrigins returns the AllowOrigins field value if set, zero value otherwise.
func (o *CorsOptionsAccessControlAllowOrigin) GetAllowOrigins() []string {
	if o == nil || o.AllowOrigins == nil {
		var ret []string
		return ret
	}
	return *o.AllowOrigins
}

// GetAllowOriginsOk returns a tuple with the AllowOrigins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorsOptionsAccessControlAllowOrigin) GetAllowOriginsOk() (*[]string, bool) {
	if o == nil || o.AllowOrigins == nil {
		return nil, false
	}
	return o.AllowOrigins, true
}

// HasAllowOrigins returns a boolean if a field has been set.
func (o *CorsOptionsAccessControlAllowOrigin) HasAllowOrigins() bool {
	if o != nil && o.AllowOrigins != nil {
		return true
	}

	return false
}

// SetAllowOrigins gets a reference to the given []string and assigns it to the AllowOrigins field.
func (o *CorsOptionsAccessControlAllowOrigin) SetAllowOrigins(v []string) {
	o.AllowOrigins = &v
}

// GetAllowAllOrigins returns the AllowAllOrigins field value if set, zero value otherwise.
func (o *CorsOptionsAccessControlAllowOrigin) GetAllowAllOrigins() bool {
	if o == nil || o.AllowAllOrigins == nil {
		var ret bool
		return ret
	}
	return *o.AllowAllOrigins
}

// GetAllowAllOriginsOk returns a tuple with the AllowAllOrigins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorsOptionsAccessControlAllowOrigin) GetAllowAllOriginsOk() (*bool, bool) {
	if o == nil || o.AllowAllOrigins == nil {
		return nil, false
	}
	return o.AllowAllOrigins, true
}

// HasAllowAllOrigins returns a boolean if a field has been set.
func (o *CorsOptionsAccessControlAllowOrigin) HasAllowAllOrigins() bool {
	if o != nil && o.AllowAllOrigins != nil {
		return true
	}

	return false
}

// SetAllowAllOrigins gets a reference to the given bool and assigns it to the AllowAllOrigins field.
func (o *CorsOptionsAccessControlAllowOrigin) SetAllowAllOrigins(v bool) {
	o.AllowAllOrigins = &v
}

// GetAllowRequestHttpOrigin returns the AllowRequestHttpOrigin field value if set, zero value otherwise.
func (o *CorsOptionsAccessControlAllowOrigin) GetAllowRequestHttpOrigin() bool {
	if o == nil || o.AllowRequestHttpOrigin == nil {
		var ret bool
		return ret
	}
	return *o.AllowRequestHttpOrigin
}

// GetAllowRequestHttpOriginOk returns a tuple with the AllowRequestHttpOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorsOptionsAccessControlAllowOrigin) GetAllowRequestHttpOriginOk() (*bool, bool) {
	if o == nil || o.AllowRequestHttpOrigin == nil {
		return nil, false
	}
	return o.AllowRequestHttpOrigin, true
}

// HasAllowRequestHttpOrigin returns a boolean if a field has been set.
func (o *CorsOptionsAccessControlAllowOrigin) HasAllowRequestHttpOrigin() bool {
	if o != nil && o.AllowRequestHttpOrigin != nil {
		return true
	}

	return false
}

// SetAllowRequestHttpOrigin gets a reference to the given bool and assigns it to the AllowRequestHttpOrigin field.
func (o *CorsOptionsAccessControlAllowOrigin) SetAllowRequestHttpOrigin(v bool) {
	o.AllowRequestHttpOrigin = &v
}

func (o CorsOptionsAccessControlAllowOrigin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowOrigins != nil {
		toSerialize["allowOrigins"] = o.AllowOrigins
	}
	if o.AllowAllOrigins != nil {
		toSerialize["allowAllOrigins"] = o.AllowAllOrigins
	}
	if o.AllowRequestHttpOrigin != nil {
		toSerialize["allowRequestHttpOrigin"] = o.AllowRequestHttpOrigin
	}
	return json.Marshal(toSerialize)
}

type NullableCorsOptionsAccessControlAllowOrigin struct {
	value *CorsOptionsAccessControlAllowOrigin
	isSet bool
}

func (v NullableCorsOptionsAccessControlAllowOrigin) Get() *CorsOptionsAccessControlAllowOrigin {
	return v.value
}

func (v *NullableCorsOptionsAccessControlAllowOrigin) Set(val *CorsOptionsAccessControlAllowOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableCorsOptionsAccessControlAllowOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableCorsOptionsAccessControlAllowOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorsOptionsAccessControlAllowOrigin(val *CorsOptionsAccessControlAllowOrigin) *NullableCorsOptionsAccessControlAllowOrigin {
	return &NullableCorsOptionsAccessControlAllowOrigin{value: val, isSet: true}
}

func (v NullableCorsOptionsAccessControlAllowOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorsOptionsAccessControlAllowOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


