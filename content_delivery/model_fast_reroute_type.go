/*
content-delivery

Cotent Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
)

// FastRerouteType Enables a HyperCache node to detect failed or slow connections to a specific origin IP address, or between Sites, and to send a second request to an alternate origin IP (or site) if the first request is delayed. If a successful response is received from either origin IP (or site), the first response is used to fulfill a client's request. The second response, if received, is ignored. If no connection to either destination is established, or if no response is received within the configured origin timeout value, the requests to the origin (or site) are retried four times before a 504 is returned to the client. This method helps ensure rapid recovery in case a temporary network problem results in loss of the initial request or response.
type FastRerouteType struct {
	// Value used by the HyperCache when it makes a request directly to the origin server. It specifies the number of seconds you want the HyperCache to wait before sending the second request to an alternate origin IP address. The number of seconds configured can be expressed to the nearest thousandth of a second, for example: 4, 3.0, 1.05, 2.005. Note that the configured value for this field must be at least 0.5 seconds less than the `intraCdnTimeout`.
	OriginTimeout *float32 `json:"originTimeout,omitempty"`
	// Enables Fast Reroute functionality.
	Enable *bool `json:"enable,omitempty"`
	// Used by the HyperCache when it makes a request to an origin through a parent site or a peer node within the same site. It specifies the number of seconds you want the HyperCache in one site to wait before sending the second request to an alternate site. The number of seconds configured can be expressed to the nearest thousandth of a second, for example: 4, 3.0, 1.05, 2.005. Note that the configured value for this field must be at least 0.5 seconds greater than the `originTimeout`.
	IntraCdnTimeout *float32 `json:"intraCdnTimeout,omitempty"`
}

// NewFastRerouteType instantiates a new FastRerouteType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFastRerouteType() *FastRerouteType {
	this := FastRerouteType{}
	var originTimeout float32 = 1.0
	this.OriginTimeout = &originTimeout
	var enable bool = false
	this.Enable = &enable
	var intraCdnTimeout float32 = 1.5
	this.IntraCdnTimeout = &intraCdnTimeout
	return &this
}

// NewFastRerouteTypeWithDefaults instantiates a new FastRerouteType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFastRerouteTypeWithDefaults() *FastRerouteType {
	this := FastRerouteType{}
	var originTimeout float32 = 1.0
	this.OriginTimeout = &originTimeout
	var enable bool = false
	this.Enable = &enable
	var intraCdnTimeout float32 = 1.5
	this.IntraCdnTimeout = &intraCdnTimeout
	return &this
}

// GetOriginTimeout returns the OriginTimeout field value if set, zero value otherwise.
func (o *FastRerouteType) GetOriginTimeout() float32 {
	if o == nil || o.OriginTimeout == nil {
		var ret float32
		return ret
	}
	return *o.OriginTimeout
}

// GetOriginTimeoutOk returns a tuple with the OriginTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastRerouteType) GetOriginTimeoutOk() (*float32, bool) {
	if o == nil || o.OriginTimeout == nil {
		return nil, false
	}
	return o.OriginTimeout, true
}

// HasOriginTimeout returns a boolean if a field has been set.
func (o *FastRerouteType) HasOriginTimeout() bool {
	if o != nil && o.OriginTimeout != nil {
		return true
	}

	return false
}

// SetOriginTimeout gets a reference to the given float32 and assigns it to the OriginTimeout field.
func (o *FastRerouteType) SetOriginTimeout(v float32) {
	o.OriginTimeout = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *FastRerouteType) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastRerouteType) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *FastRerouteType) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *FastRerouteType) SetEnable(v bool) {
	o.Enable = &v
}

// GetIntraCdnTimeout returns the IntraCdnTimeout field value if set, zero value otherwise.
func (o *FastRerouteType) GetIntraCdnTimeout() float32 {
	if o == nil || o.IntraCdnTimeout == nil {
		var ret float32
		return ret
	}
	return *o.IntraCdnTimeout
}

// GetIntraCdnTimeoutOk returns a tuple with the IntraCdnTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastRerouteType) GetIntraCdnTimeoutOk() (*float32, bool) {
	if o == nil || o.IntraCdnTimeout == nil {
		return nil, false
	}
	return o.IntraCdnTimeout, true
}

// HasIntraCdnTimeout returns a boolean if a field has been set.
func (o *FastRerouteType) HasIntraCdnTimeout() bool {
	if o != nil && o.IntraCdnTimeout != nil {
		return true
	}

	return false
}

// SetIntraCdnTimeout gets a reference to the given float32 and assigns it to the IntraCdnTimeout field.
func (o *FastRerouteType) SetIntraCdnTimeout(v float32) {
	o.IntraCdnTimeout = &v
}

func (o FastRerouteType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OriginTimeout != nil {
		toSerialize["originTimeout"] = o.OriginTimeout
	}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	if o.IntraCdnTimeout != nil {
		toSerialize["intraCdnTimeout"] = o.IntraCdnTimeout
	}
	return json.Marshal(toSerialize)
}

type NullableFastRerouteType struct {
	value *FastRerouteType
	isSet bool
}

func (v NullableFastRerouteType) Get() *FastRerouteType {
	return v.value
}

func (v *NullableFastRerouteType) Set(val *FastRerouteType) {
	v.value = val
	v.isSet = true
}

func (v NullableFastRerouteType) IsSet() bool {
	return v.isSet
}

func (v *NullableFastRerouteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFastRerouteType(val *FastRerouteType) *NullableFastRerouteType {
	return &NullableFastRerouteType{value: val, isSet: true}
}

func (v NullableFastRerouteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFastRerouteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


