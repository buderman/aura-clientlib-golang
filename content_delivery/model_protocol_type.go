/*
content-delivery

Cotent Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
	"fmt"
)

// ProtocolType Type of protocol, either `HTTP` or `HTTPS`.
type ProtocolType string

// List of protocolType
const (
	PROTOCOLTYPE_HTTP ProtocolType = "HTTP"
	PROTOCOLTYPE_HTTPS ProtocolType = "HTTPS"
)

var allowedProtocolTypeEnumValues = []ProtocolType{
	"HTTP",
	"HTTPS",
}

func (v *ProtocolType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProtocolType(value)
	for _, existing := range allowedProtocolTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProtocolType", value)
}

// NewProtocolTypeFromValue returns a pointer to a valid ProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtocolTypeFromValue(v string) (*ProtocolType, error) {
	ev := ProtocolType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtocolType: valid values are %v", v, allowedProtocolTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtocolType) IsValid() bool {
	for _, existing := range allowedProtocolTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to protocolType value
func (v ProtocolType) Ptr() *ProtocolType {
	return &v
}

type NullableProtocolType struct {
	value *ProtocolType
	isSet bool
}

func (v NullableProtocolType) Get() *ProtocolType {
	return v.value
}

func (v *NullableProtocolType) Set(val *ProtocolType) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolType) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolType(val *ProtocolType) *NullableProtocolType {
	return &NullableProtocolType{value: val, isSet: true}
}

func (v NullableProtocolType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

