/*
content-delivery

Cotent Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
)

// LimitRateOptions This behavior's set of configuration options.
type LimitRateOptions struct {
	// The maximum bandwidth limit, as specified by the respective unit.
	Bandwidth int32 `json:"bandwidth"`
	// Bandwidth unit, either the default `BYTES_PER_SECOND`, `KB_PER_SECOND`, or `MB_PER_SECOND`.
	Unit *string `json:"unit,omitempty"`
}

// NewLimitRateOptions instantiates a new LimitRateOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimitRateOptions(bandwidth int32) *LimitRateOptions {
	this := LimitRateOptions{}
	this.Bandwidth = bandwidth
	var unit string = "BYTES_PER_SECOND"
	this.Unit = &unit
	return &this
}

// NewLimitRateOptionsWithDefaults instantiates a new LimitRateOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitRateOptionsWithDefaults() *LimitRateOptions {
	this := LimitRateOptions{}
	var unit string = "BYTES_PER_SECOND"
	this.Unit = &unit
	return &this
}

// GetBandwidth returns the Bandwidth field value
func (o *LimitRateOptions) GetBandwidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value
// and a boolean to check if the value has been set.
func (o *LimitRateOptions) GetBandwidthOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Bandwidth, true
}

// SetBandwidth sets field value
func (o *LimitRateOptions) SetBandwidth(v int32) {
	o.Bandwidth = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *LimitRateOptions) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitRateOptions) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *LimitRateOptions) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *LimitRateOptions) SetUnit(v string) {
	o.Unit = &v
}

func (o LimitRateOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableLimitRateOptions struct {
	value *LimitRateOptions
	isSet bool
}

func (v NullableLimitRateOptions) Get() *LimitRateOptions {
	return v.value
}

func (v *NullableLimitRateOptions) Set(val *LimitRateOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableLimitRateOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableLimitRateOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimitRateOptions(val *LimitRateOptions) *NullableLimitRateOptions {
	return &NullableLimitRateOptions{value: val, isSet: true}
}

func (v NullableLimitRateOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimitRateOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


