/*
content-delivery

Aura LCDN Content Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
)

// DscpOptions This behavior's set of configuration options.
type DscpOptions struct {
	// DiffServ byte field, including the last two ECN bits. When configuring this field, the ECN bits must be set to 0 (zero), and only the upper 6 bits should be set.
	Value int32 `json:"value"`
}

// NewDscpOptions instantiates a new DscpOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDscpOptions(value int32) *DscpOptions {
	this := DscpOptions{}
	this.Value = value
	return &this
}

// NewDscpOptionsWithDefaults instantiates a new DscpOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDscpOptionsWithDefaults() *DscpOptions {
	this := DscpOptions{}
	return &this
}

// GetValue returns the Value field value
func (o *DscpOptions) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DscpOptions) GetValueOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DscpOptions) SetValue(v int32) {
	o.Value = v
}

func (o DscpOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableDscpOptions struct {
	value *DscpOptions
	isSet bool
}

func (v NullableDscpOptions) Get() *DscpOptions {
	return v.value
}

func (v *NullableDscpOptions) Set(val *DscpOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDscpOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDscpOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDscpOptions(val *DscpOptions) *NullableDscpOptions {
	return &NullableDscpOptions{value: val, isSet: true}
}

func (v NullableDscpOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDscpOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


