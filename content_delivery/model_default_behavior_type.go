/*
content-delivery

Aura LCDN Content Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
	"fmt"
)

// DefaultBehaviorType - Default behavior parent type
type DefaultBehaviorType struct {
	DefaultFrontEndCache *DefaultFrontEndCache
	DefaultHttp2Delivery *DefaultHttp2Delivery
	DefaultHttpDelivery *DefaultHttpDelivery
	DefaultHttpsDelivery *DefaultHttpsDelivery
	DefaultOriginServer *DefaultOriginServer
	DefaultRamOnlyCaching *DefaultRamOnlyCaching
	DefaultStoragePartition *DefaultStoragePartition
}

// DefaultFrontEndCacheAsDefaultBehaviorType is a convenience function that returns DefaultFrontEndCache wrapped in DefaultBehaviorType
func DefaultFrontEndCacheAsDefaultBehaviorType(v *DefaultFrontEndCache) DefaultBehaviorType {
	return DefaultBehaviorType{ DefaultFrontEndCache: v}
}

// DefaultHttp2DeliveryAsDefaultBehaviorType is a convenience function that returns DefaultHttp2Delivery wrapped in DefaultBehaviorType
func DefaultHttp2DeliveryAsDefaultBehaviorType(v *DefaultHttp2Delivery) DefaultBehaviorType {
	return DefaultBehaviorType{ DefaultHttp2Delivery: v}
}

// DefaultHttpDeliveryAsDefaultBehaviorType is a convenience function that returns DefaultHttpDelivery wrapped in DefaultBehaviorType
func DefaultHttpDeliveryAsDefaultBehaviorType(v *DefaultHttpDelivery) DefaultBehaviorType {
	return DefaultBehaviorType{ DefaultHttpDelivery: v}
}

// DefaultHttpsDeliveryAsDefaultBehaviorType is a convenience function that returns DefaultHttpsDelivery wrapped in DefaultBehaviorType
func DefaultHttpsDeliveryAsDefaultBehaviorType(v *DefaultHttpsDelivery) DefaultBehaviorType {
	return DefaultBehaviorType{ DefaultHttpsDelivery: v}
}

// DefaultOriginServerAsDefaultBehaviorType is a convenience function that returns DefaultOriginServer wrapped in DefaultBehaviorType
func DefaultOriginServerAsDefaultBehaviorType(v *DefaultOriginServer) DefaultBehaviorType {
	return DefaultBehaviorType{ DefaultOriginServer: v}
}

// DefaultRamOnlyCachingAsDefaultBehaviorType is a convenience function that returns DefaultRamOnlyCaching wrapped in DefaultBehaviorType
func DefaultRamOnlyCachingAsDefaultBehaviorType(v *DefaultRamOnlyCaching) DefaultBehaviorType {
	return DefaultBehaviorType{ DefaultRamOnlyCaching: v}
}

// DefaultStoragePartitionAsDefaultBehaviorType is a convenience function that returns DefaultStoragePartition wrapped in DefaultBehaviorType
func DefaultStoragePartitionAsDefaultBehaviorType(v *DefaultStoragePartition) DefaultBehaviorType {
	return DefaultBehaviorType{ DefaultStoragePartition: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DefaultBehaviorType) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'defaultFrontEndCache'
	if jsonDict["name"] == "defaultFrontEndCache" {
		// try to unmarshal JSON data into DefaultFrontEndCache
		err = json.Unmarshal(data, &dst.DefaultFrontEndCache)
		if err == nil {
			return nil // data stored in dst.DefaultFrontEndCache, return on the first match
		} else {
			dst.DefaultFrontEndCache = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultFrontEndCache: %s", err.Error())
		}
	}

	// check if the discriminator value is 'defaultHttp2Delivery'
	if jsonDict["name"] == "defaultHttp2Delivery" {
		// try to unmarshal JSON data into DefaultHttp2Delivery
		err = json.Unmarshal(data, &dst.DefaultHttp2Delivery)
		if err == nil {
			return nil // data stored in dst.DefaultHttp2Delivery, return on the first match
		} else {
			dst.DefaultHttp2Delivery = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultHttp2Delivery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'defaultHttpDelivery'
	if jsonDict["name"] == "defaultHttpDelivery" {
		// try to unmarshal JSON data into DefaultHttpDelivery
		err = json.Unmarshal(data, &dst.DefaultHttpDelivery)
		if err == nil {
			return nil // data stored in dst.DefaultHttpDelivery, return on the first match
		} else {
			dst.DefaultHttpDelivery = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultHttpDelivery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'defaultHttpsDelivery'
	if jsonDict["name"] == "defaultHttpsDelivery" {
		// try to unmarshal JSON data into DefaultHttpsDelivery
		err = json.Unmarshal(data, &dst.DefaultHttpsDelivery)
		if err == nil {
			return nil // data stored in dst.DefaultHttpsDelivery, return on the first match
		} else {
			dst.DefaultHttpsDelivery = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultHttpsDelivery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'defaultOriginServer'
	if jsonDict["name"] == "defaultOriginServer" {
		// try to unmarshal JSON data into DefaultOriginServer
		err = json.Unmarshal(data, &dst.DefaultOriginServer)
		if err == nil {
			return nil // data stored in dst.DefaultOriginServer, return on the first match
		} else {
			dst.DefaultOriginServer = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultOriginServer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'defaultRamOnlyCaching'
	if jsonDict["name"] == "defaultRamOnlyCaching" {
		// try to unmarshal JSON data into DefaultRamOnlyCaching
		err = json.Unmarshal(data, &dst.DefaultRamOnlyCaching)
		if err == nil {
			return nil // data stored in dst.DefaultRamOnlyCaching, return on the first match
		} else {
			dst.DefaultRamOnlyCaching = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultRamOnlyCaching: %s", err.Error())
		}
	}

	// check if the discriminator value is 'defaultStoragePartition'
	if jsonDict["name"] == "defaultStoragePartition" {
		// try to unmarshal JSON data into DefaultStoragePartition
		err = json.Unmarshal(data, &dst.DefaultStoragePartition)
		if err == nil {
			return nil // data stored in dst.DefaultStoragePartition, return on the first match
		} else {
			dst.DefaultStoragePartition = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultStoragePartition: %s", err.Error())
		}
	}

	// check if the discriminator value is 'frontEndCache'
	if jsonDict["name"] == "frontEndCache" {
		// try to unmarshal JSON data into DefaultFrontEndCache
		err = json.Unmarshal(data, &dst.DefaultFrontEndCache)
		if err == nil {
			return nil // data stored in dst.DefaultFrontEndCache, return on the first match
		} else {
			dst.DefaultFrontEndCache = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultFrontEndCache: %s", err.Error())
		}
	}

	// check if the discriminator value is 'http2Delivery'
	if jsonDict["name"] == "http2Delivery" {
		// try to unmarshal JSON data into DefaultHttp2Delivery
		err = json.Unmarshal(data, &dst.DefaultHttp2Delivery)
		if err == nil {
			return nil // data stored in dst.DefaultHttp2Delivery, return on the first match
		} else {
			dst.DefaultHttp2Delivery = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultHttp2Delivery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'httpDelivery'
	if jsonDict["name"] == "httpDelivery" {
		// try to unmarshal JSON data into DefaultHttpDelivery
		err = json.Unmarshal(data, &dst.DefaultHttpDelivery)
		if err == nil {
			return nil // data stored in dst.DefaultHttpDelivery, return on the first match
		} else {
			dst.DefaultHttpDelivery = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultHttpDelivery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'httpsDelivery'
	if jsonDict["name"] == "httpsDelivery" {
		// try to unmarshal JSON data into DefaultHttpsDelivery
		err = json.Unmarshal(data, &dst.DefaultHttpsDelivery)
		if err == nil {
			return nil // data stored in dst.DefaultHttpsDelivery, return on the first match
		} else {
			dst.DefaultHttpsDelivery = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultHttpsDelivery: %s", err.Error())
		}
	}

	// check if the discriminator value is 'originServer'
	if jsonDict["name"] == "originServer" {
		// try to unmarshal JSON data into DefaultOriginServer
		err = json.Unmarshal(data, &dst.DefaultOriginServer)
		if err == nil {
			return nil // data stored in dst.DefaultOriginServer, return on the first match
		} else {
			dst.DefaultOriginServer = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultOriginServer: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ramOnlyCaching'
	if jsonDict["name"] == "ramOnlyCaching" {
		// try to unmarshal JSON data into DefaultRamOnlyCaching
		err = json.Unmarshal(data, &dst.DefaultRamOnlyCaching)
		if err == nil {
			return nil // data stored in dst.DefaultRamOnlyCaching, return on the first match
		} else {
			dst.DefaultRamOnlyCaching = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultRamOnlyCaching: %s", err.Error())
		}
	}

	// check if the discriminator value is 'storagePartition'
	if jsonDict["name"] == "storagePartition" {
		// try to unmarshal JSON data into DefaultStoragePartition
		err = json.Unmarshal(data, &dst.DefaultStoragePartition)
		if err == nil {
			return nil // data stored in dst.DefaultStoragePartition, return on the first match
		} else {
			dst.DefaultStoragePartition = nil
			return fmt.Errorf("Failed to unmarshal DefaultBehaviorType as DefaultStoragePartition: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DefaultBehaviorType) MarshalJSON() ([]byte, error) {
	if src.DefaultFrontEndCache != nil {
		return json.Marshal(&src.DefaultFrontEndCache)
	}

	if src.DefaultHttp2Delivery != nil {
		return json.Marshal(&src.DefaultHttp2Delivery)
	}

	if src.DefaultHttpDelivery != nil {
		return json.Marshal(&src.DefaultHttpDelivery)
	}

	if src.DefaultHttpsDelivery != nil {
		return json.Marshal(&src.DefaultHttpsDelivery)
	}

	if src.DefaultOriginServer != nil {
		return json.Marshal(&src.DefaultOriginServer)
	}

	if src.DefaultRamOnlyCaching != nil {
		return json.Marshal(&src.DefaultRamOnlyCaching)
	}

	if src.DefaultStoragePartition != nil {
		return json.Marshal(&src.DefaultStoragePartition)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DefaultBehaviorType) GetActualInstance() (interface{}) {
	if obj.DefaultFrontEndCache != nil {
		return obj.DefaultFrontEndCache
	}

	if obj.DefaultHttp2Delivery != nil {
		return obj.DefaultHttp2Delivery
	}

	if obj.DefaultHttpDelivery != nil {
		return obj.DefaultHttpDelivery
	}

	if obj.DefaultHttpsDelivery != nil {
		return obj.DefaultHttpsDelivery
	}

	if obj.DefaultOriginServer != nil {
		return obj.DefaultOriginServer
	}

	if obj.DefaultRamOnlyCaching != nil {
		return obj.DefaultRamOnlyCaching
	}

	if obj.DefaultStoragePartition != nil {
		return obj.DefaultStoragePartition
	}

	// all schemas are nil
	return nil
}

type NullableDefaultBehaviorType struct {
	value *DefaultBehaviorType
	isSet bool
}

func (v NullableDefaultBehaviorType) Get() *DefaultBehaviorType {
	return v.value
}

func (v *NullableDefaultBehaviorType) Set(val *DefaultBehaviorType) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultBehaviorType) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultBehaviorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultBehaviorType(val *DefaultBehaviorType) *NullableDefaultBehaviorType {
	return &NullableDefaultBehaviorType{value: val, isSet: true}
}

func (v NullableDefaultBehaviorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultBehaviorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


