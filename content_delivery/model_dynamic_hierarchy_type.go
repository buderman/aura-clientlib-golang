/*
content-delivery

Aura LCDN Content Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
)

// DynamicHierarchyType Configure a HyperCache node that is the endpoint of an origin path (a root HyperCache) to monitor the health of the origin server by sending a GET request for a specific URL.
type DynamicHierarchyType struct {
	// A list of valid HTTP response codes that are to be considered a valid HTTP response. Each item is either a single valid response code or a range of valid response codes.
	HealthCheckValidResponseCodes *[]string `json:"healthCheckValidResponseCodes,omitempty"`
	// A numeric value that represents the number of seconds between successive HTTP GET health check requests. The minimum acceptable value is 1, and the default is 2.
	HealthCheckInterval *int32 `json:"healthCheckInterval,omitempty"`
	// URL the health check request uses to determine the health of the origin server. The HyperCache periodically sends an HTTP GET request for this URL to check the health of the origin server. Any response received is interpreted as a healthy origin, including error responses.  This URI may either be a complete URL using the 'http' scheme, or just a path with a leading '/'.
	HealthCheckUrl *string `json:"healthCheckUrl,omitempty"`
}

// NewDynamicHierarchyType instantiates a new DynamicHierarchyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicHierarchyType() *DynamicHierarchyType {
	this := DynamicHierarchyType{}
	return &this
}

// NewDynamicHierarchyTypeWithDefaults instantiates a new DynamicHierarchyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicHierarchyTypeWithDefaults() *DynamicHierarchyType {
	this := DynamicHierarchyType{}
	return &this
}

// GetHealthCheckValidResponseCodes returns the HealthCheckValidResponseCodes field value if set, zero value otherwise.
func (o *DynamicHierarchyType) GetHealthCheckValidResponseCodes() []string {
	if o == nil || o.HealthCheckValidResponseCodes == nil {
		var ret []string
		return ret
	}
	return *o.HealthCheckValidResponseCodes
}

// GetHealthCheckValidResponseCodesOk returns a tuple with the HealthCheckValidResponseCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicHierarchyType) GetHealthCheckValidResponseCodesOk() (*[]string, bool) {
	if o == nil || o.HealthCheckValidResponseCodes == nil {
		return nil, false
	}
	return o.HealthCheckValidResponseCodes, true
}

// HasHealthCheckValidResponseCodes returns a boolean if a field has been set.
func (o *DynamicHierarchyType) HasHealthCheckValidResponseCodes() bool {
	if o != nil && o.HealthCheckValidResponseCodes != nil {
		return true
	}

	return false
}

// SetHealthCheckValidResponseCodes gets a reference to the given []string and assigns it to the HealthCheckValidResponseCodes field.
func (o *DynamicHierarchyType) SetHealthCheckValidResponseCodes(v []string) {
	o.HealthCheckValidResponseCodes = &v
}

// GetHealthCheckInterval returns the HealthCheckInterval field value if set, zero value otherwise.
func (o *DynamicHierarchyType) GetHealthCheckInterval() int32 {
	if o == nil || o.HealthCheckInterval == nil {
		var ret int32
		return ret
	}
	return *o.HealthCheckInterval
}

// GetHealthCheckIntervalOk returns a tuple with the HealthCheckInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicHierarchyType) GetHealthCheckIntervalOk() (*int32, bool) {
	if o == nil || o.HealthCheckInterval == nil {
		return nil, false
	}
	return o.HealthCheckInterval, true
}

// HasHealthCheckInterval returns a boolean if a field has been set.
func (o *DynamicHierarchyType) HasHealthCheckInterval() bool {
	if o != nil && o.HealthCheckInterval != nil {
		return true
	}

	return false
}

// SetHealthCheckInterval gets a reference to the given int32 and assigns it to the HealthCheckInterval field.
func (o *DynamicHierarchyType) SetHealthCheckInterval(v int32) {
	o.HealthCheckInterval = &v
}

// GetHealthCheckUrl returns the HealthCheckUrl field value if set, zero value otherwise.
func (o *DynamicHierarchyType) GetHealthCheckUrl() string {
	if o == nil || o.HealthCheckUrl == nil {
		var ret string
		return ret
	}
	return *o.HealthCheckUrl
}

// GetHealthCheckUrlOk returns a tuple with the HealthCheckUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicHierarchyType) GetHealthCheckUrlOk() (*string, bool) {
	if o == nil || o.HealthCheckUrl == nil {
		return nil, false
	}
	return o.HealthCheckUrl, true
}

// HasHealthCheckUrl returns a boolean if a field has been set.
func (o *DynamicHierarchyType) HasHealthCheckUrl() bool {
	if o != nil && o.HealthCheckUrl != nil {
		return true
	}

	return false
}

// SetHealthCheckUrl gets a reference to the given string and assigns it to the HealthCheckUrl field.
func (o *DynamicHierarchyType) SetHealthCheckUrl(v string) {
	o.HealthCheckUrl = &v
}

func (o DynamicHierarchyType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HealthCheckValidResponseCodes != nil {
		toSerialize["healthCheckValidResponseCodes"] = o.HealthCheckValidResponseCodes
	}
	if o.HealthCheckInterval != nil {
		toSerialize["healthCheckInterval"] = o.HealthCheckInterval
	}
	if o.HealthCheckUrl != nil {
		toSerialize["healthCheckUrl"] = o.HealthCheckUrl
	}
	return json.Marshal(toSerialize)
}

type NullableDynamicHierarchyType struct {
	value *DynamicHierarchyType
	isSet bool
}

func (v NullableDynamicHierarchyType) Get() *DynamicHierarchyType {
	return v.value
}

func (v *NullableDynamicHierarchyType) Set(val *DynamicHierarchyType) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicHierarchyType) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicHierarchyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicHierarchyType(val *DynamicHierarchyType) *NullableDynamicHierarchyType {
	return &NullableDynamicHierarchyType{value: val, isSet: true}
}

func (v NullableDynamicHierarchyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicHierarchyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


