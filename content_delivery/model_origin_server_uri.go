/*
content-delivery

Aura LCDN Content Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
)

// OriginServerUri Define URI used for accessing origin server in case of a cache miss.
type OriginServerUri struct {
	// The name of the behavior, `originServerUri` in this case.
	Name string `json:"name"`
	Options OriginServerUriOptions `json:"options"`
}

// NewOriginServerUri instantiates a new OriginServerUri object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOriginServerUri(name string, options OriginServerUriOptions) *OriginServerUri {
	this := OriginServerUri{}
	this.Name = name
	this.Options = options
	return &this
}

// NewOriginServerUriWithDefaults instantiates a new OriginServerUri object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOriginServerUriWithDefaults() *OriginServerUri {
	this := OriginServerUri{}
	return &this
}

// GetName returns the Name field value
func (o *OriginServerUri) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OriginServerUri) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OriginServerUri) SetName(v string) {
	o.Name = v
}

// GetOptions returns the Options field value
func (o *OriginServerUri) GetOptions() OriginServerUriOptions {
	if o == nil {
		var ret OriginServerUriOptions
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *OriginServerUri) GetOptionsOk() (*OriginServerUriOptions, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Options, true
}

// SetOptions sets field value
func (o *OriginServerUri) SetOptions(v OriginServerUriOptions) {
	o.Options = v
}

func (o OriginServerUri) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableOriginServerUri struct {
	value *OriginServerUri
	isSet bool
}

func (v NullableOriginServerUri) Get() *OriginServerUri {
	return v.value
}

func (v *NullableOriginServerUri) Set(val *OriginServerUri) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginServerUri) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginServerUri) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginServerUri(val *OriginServerUri) *NullableOriginServerUri {
	return &NullableOriginServerUri{value: val, isSet: true}
}

func (v NullableOriginServerUri) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginServerUri) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


