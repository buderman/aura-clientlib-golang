/*
content-delivery

Cotent Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
	"fmt"
)

// PrefixPrioritizationType Prefix prioritization helps manage peak period resources by prioritizing requests for content from specific content providers. Priorities are `LOW`, `MEDIUM`, or `HIGH`.
type PrefixPrioritizationType string

// List of prefixPrioritizationType
const (
	PREFIXPRIORITIZATIONTYPE_HIGH PrefixPrioritizationType = "HIGH"
	PREFIXPRIORITIZATIONTYPE_MEDIUM PrefixPrioritizationType = "MEDIUM"
	PREFIXPRIORITIZATIONTYPE_LOW PrefixPrioritizationType = "LOW"
)

var allowedPrefixPrioritizationTypeEnumValues = []PrefixPrioritizationType{
	"HIGH",
	"MEDIUM",
	"LOW",
}

func (v *PrefixPrioritizationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrefixPrioritizationType(value)
	for _, existing := range allowedPrefixPrioritizationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrefixPrioritizationType", value)
}

// NewPrefixPrioritizationTypeFromValue returns a pointer to a valid PrefixPrioritizationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrefixPrioritizationTypeFromValue(v string) (*PrefixPrioritizationType, error) {
	ev := PrefixPrioritizationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrefixPrioritizationType: valid values are %v", v, allowedPrefixPrioritizationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrefixPrioritizationType) IsValid() bool {
	for _, existing := range allowedPrefixPrioritizationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to prefixPrioritizationType value
func (v PrefixPrioritizationType) Ptr() *PrefixPrioritizationType {
	return &v
}

type NullablePrefixPrioritizationType struct {
	value *PrefixPrioritizationType
	isSet bool
}

func (v NullablePrefixPrioritizationType) Get() *PrefixPrioritizationType {
	return v.value
}

func (v *NullablePrefixPrioritizationType) Set(val *PrefixPrioritizationType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefixPrioritizationType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefixPrioritizationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefixPrioritizationType(val *PrefixPrioritizationType) *NullablePrefixPrioritizationType {
	return &NullablePrefixPrioritizationType{value: val, isSet: true}
}

func (v NullablePrefixPrioritizationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefixPrioritizationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

