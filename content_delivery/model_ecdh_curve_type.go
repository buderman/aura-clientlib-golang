/*
content-delivery

Aura LCDN Content Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
	"fmt"
)

// EcdhCurveType Elliptic Curve Diffie-Hellman (ECDH) protocol.  Specifies a curve for ECDHE ciphers.
type EcdhCurveType string

// List of ecdhCurveType
const (
	ECDHCURVETYPE_SECP384_R1 EcdhCurveType = "SECP384R1"
	ECDHCURVETYPE_PRIME256_V1 EcdhCurveType = "PRIME256V1"
)

// All allowed values of EcdhCurveType enum
var AllowedEcdhCurveTypeEnumValues = []EcdhCurveType{
	"SECP384R1",
	"PRIME256V1",
}

func (v *EcdhCurveType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EcdhCurveType(value)
	for _, existing := range AllowedEcdhCurveTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EcdhCurveType", value)
}

// NewEcdhCurveTypeFromValue returns a pointer to a valid EcdhCurveType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEcdhCurveTypeFromValue(v string) (*EcdhCurveType, error) {
	ev := EcdhCurveType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EcdhCurveType: valid values are %v", v, AllowedEcdhCurveTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EcdhCurveType) IsValid() bool {
	for _, existing := range AllowedEcdhCurveTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ecdhCurveType value
func (v EcdhCurveType) Ptr() *EcdhCurveType {
	return &v
}

type NullableEcdhCurveType struct {
	value *EcdhCurveType
	isSet bool
}

func (v NullableEcdhCurveType) Get() *EcdhCurveType {
	return v.value
}

func (v *NullableEcdhCurveType) Set(val *EcdhCurveType) {
	v.value = val
	v.isSet = true
}

func (v NullableEcdhCurveType) IsSet() bool {
	return v.isSet
}

func (v *NullableEcdhCurveType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEcdhCurveType(val *EcdhCurveType) *NullableEcdhCurveType {
	return &NullableEcdhCurveType{value: val, isSet: true}
}

func (v NullableEcdhCurveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEcdhCurveType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

