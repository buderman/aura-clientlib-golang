/*
content-delivery

Aura LCDN Content Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
)

// UriSignatureOptions This behavior's set of configuration options.
type UriSignatureOptions struct {
	// The name of the request parameter which contains the index for the shared secret.
	SharedSecretIndexParameter string `json:"sharedSecretIndexParameter"`
	// Specifies the set of input parameters and their order. The input parameter pattern can use parts of the incoming request, for example: `$url_signature_shared_secret,#uri?sid=$arg_sid&e=$arg_e`. To represent an expiration as a query argument, or with a cookie incoming URL, use `$uri_sign_expire`.
	InputParameterPattern string `json:"inputParameterPattern"`
	// Signature calculation algorithm, either `SHA256`, `SHA384`, `SHA512`, `HMAC_MD5`, `HMAC_SHA1`, `HMAC_SHA256`, `HMAC_SHA384`, `HMAC_SHA512`, `MD5`, or `SHA1`.
	Algorithm string `json:"algorithm"`
	// The name of the capture path in the URI filter above used as a cookie path string to define the protected file names or path.
	ProtectedPathPattern *string `json:"protectedPathPattern,omitempty"`
	SharedSecretSetId int32 `json:"sharedSecretSetId"`
	// The encoding used for the token parameter, either `BASE64`, `HEX`, or `URL_SAFE_BASE64`.
	TokenEncoding string `json:"tokenEncoding"`
	// The name of the request parameter which contains the expiration time for the URI being examined.
	UriExpirationParameter string `json:"uriExpirationParameter"`
	// Use cookies derived from master query arguments to protect files matching URI filter with no query arguments, such as child `.m3u8` and `.ts`.
	ProtectedSubFiles *bool `json:"protectedSubFiles,omitempty"`
	// Specifies the capitalization used for transforming the input parameter before signature calculation. Either `LOWERCASE`, `UPPERCASE`, or `NO_CHANGE`.
	InputParameterCapitalization *string `json:"inputParameterCapitalization,omitempty"`
	// The name of the request parameter which contains the signature token.
	TokenParameter string `json:"tokenParameter"`
}

// NewUriSignatureOptions instantiates a new UriSignatureOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUriSignatureOptions(sharedSecretIndexParameter string, inputParameterPattern string, algorithm string, sharedSecretSetId int32, tokenEncoding string, uriExpirationParameter string, tokenParameter string) *UriSignatureOptions {
	this := UriSignatureOptions{}
	this.SharedSecretIndexParameter = sharedSecretIndexParameter
	this.InputParameterPattern = inputParameterPattern
	this.Algorithm = algorithm
	this.SharedSecretSetId = sharedSecretSetId
	this.TokenEncoding = tokenEncoding
	this.UriExpirationParameter = uriExpirationParameter
	this.TokenParameter = tokenParameter
	return &this
}

// NewUriSignatureOptionsWithDefaults instantiates a new UriSignatureOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUriSignatureOptionsWithDefaults() *UriSignatureOptions {
	this := UriSignatureOptions{}
	return &this
}

// GetSharedSecretIndexParameter returns the SharedSecretIndexParameter field value
func (o *UriSignatureOptions) GetSharedSecretIndexParameter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SharedSecretIndexParameter
}

// GetSharedSecretIndexParameterOk returns a tuple with the SharedSecretIndexParameter field value
// and a boolean to check if the value has been set.
func (o *UriSignatureOptions) GetSharedSecretIndexParameterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SharedSecretIndexParameter, true
}

// SetSharedSecretIndexParameter sets field value
func (o *UriSignatureOptions) SetSharedSecretIndexParameter(v string) {
	o.SharedSecretIndexParameter = v
}

// GetInputParameterPattern returns the InputParameterPattern field value
func (o *UriSignatureOptions) GetInputParameterPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InputParameterPattern
}

// GetInputParameterPatternOk returns a tuple with the InputParameterPattern field value
// and a boolean to check if the value has been set.
func (o *UriSignatureOptions) GetInputParameterPatternOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InputParameterPattern, true
}

// SetInputParameterPattern sets field value
func (o *UriSignatureOptions) SetInputParameterPattern(v string) {
	o.InputParameterPattern = v
}

// GetAlgorithm returns the Algorithm field value
func (o *UriSignatureOptions) GetAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *UriSignatureOptions) GetAlgorithmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *UriSignatureOptions) SetAlgorithm(v string) {
	o.Algorithm = v
}

// GetProtectedPathPattern returns the ProtectedPathPattern field value if set, zero value otherwise.
func (o *UriSignatureOptions) GetProtectedPathPattern() string {
	if o == nil || o.ProtectedPathPattern == nil {
		var ret string
		return ret
	}
	return *o.ProtectedPathPattern
}

// GetProtectedPathPatternOk returns a tuple with the ProtectedPathPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UriSignatureOptions) GetProtectedPathPatternOk() (*string, bool) {
	if o == nil || o.ProtectedPathPattern == nil {
		return nil, false
	}
	return o.ProtectedPathPattern, true
}

// HasProtectedPathPattern returns a boolean if a field has been set.
func (o *UriSignatureOptions) HasProtectedPathPattern() bool {
	if o != nil && o.ProtectedPathPattern != nil {
		return true
	}

	return false
}

// SetProtectedPathPattern gets a reference to the given string and assigns it to the ProtectedPathPattern field.
func (o *UriSignatureOptions) SetProtectedPathPattern(v string) {
	o.ProtectedPathPattern = &v
}

// GetSharedSecretSetId returns the SharedSecretSetId field value
func (o *UriSignatureOptions) GetSharedSecretSetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SharedSecretSetId
}

// GetSharedSecretSetIdOk returns a tuple with the SharedSecretSetId field value
// and a boolean to check if the value has been set.
func (o *UriSignatureOptions) GetSharedSecretSetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SharedSecretSetId, true
}

// SetSharedSecretSetId sets field value
func (o *UriSignatureOptions) SetSharedSecretSetId(v int32) {
	o.SharedSecretSetId = v
}

// GetTokenEncoding returns the TokenEncoding field value
func (o *UriSignatureOptions) GetTokenEncoding() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenEncoding
}

// GetTokenEncodingOk returns a tuple with the TokenEncoding field value
// and a boolean to check if the value has been set.
func (o *UriSignatureOptions) GetTokenEncodingOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TokenEncoding, true
}

// SetTokenEncoding sets field value
func (o *UriSignatureOptions) SetTokenEncoding(v string) {
	o.TokenEncoding = v
}

// GetUriExpirationParameter returns the UriExpirationParameter field value
func (o *UriSignatureOptions) GetUriExpirationParameter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UriExpirationParameter
}

// GetUriExpirationParameterOk returns a tuple with the UriExpirationParameter field value
// and a boolean to check if the value has been set.
func (o *UriSignatureOptions) GetUriExpirationParameterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UriExpirationParameter, true
}

// SetUriExpirationParameter sets field value
func (o *UriSignatureOptions) SetUriExpirationParameter(v string) {
	o.UriExpirationParameter = v
}

// GetProtectedSubFiles returns the ProtectedSubFiles field value if set, zero value otherwise.
func (o *UriSignatureOptions) GetProtectedSubFiles() bool {
	if o == nil || o.ProtectedSubFiles == nil {
		var ret bool
		return ret
	}
	return *o.ProtectedSubFiles
}

// GetProtectedSubFilesOk returns a tuple with the ProtectedSubFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UriSignatureOptions) GetProtectedSubFilesOk() (*bool, bool) {
	if o == nil || o.ProtectedSubFiles == nil {
		return nil, false
	}
	return o.ProtectedSubFiles, true
}

// HasProtectedSubFiles returns a boolean if a field has been set.
func (o *UriSignatureOptions) HasProtectedSubFiles() bool {
	if o != nil && o.ProtectedSubFiles != nil {
		return true
	}

	return false
}

// SetProtectedSubFiles gets a reference to the given bool and assigns it to the ProtectedSubFiles field.
func (o *UriSignatureOptions) SetProtectedSubFiles(v bool) {
	o.ProtectedSubFiles = &v
}

// GetInputParameterCapitalization returns the InputParameterCapitalization field value if set, zero value otherwise.
func (o *UriSignatureOptions) GetInputParameterCapitalization() string {
	if o == nil || o.InputParameterCapitalization == nil {
		var ret string
		return ret
	}
	return *o.InputParameterCapitalization
}

// GetInputParameterCapitalizationOk returns a tuple with the InputParameterCapitalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UriSignatureOptions) GetInputParameterCapitalizationOk() (*string, bool) {
	if o == nil || o.InputParameterCapitalization == nil {
		return nil, false
	}
	return o.InputParameterCapitalization, true
}

// HasInputParameterCapitalization returns a boolean if a field has been set.
func (o *UriSignatureOptions) HasInputParameterCapitalization() bool {
	if o != nil && o.InputParameterCapitalization != nil {
		return true
	}

	return false
}

// SetInputParameterCapitalization gets a reference to the given string and assigns it to the InputParameterCapitalization field.
func (o *UriSignatureOptions) SetInputParameterCapitalization(v string) {
	o.InputParameterCapitalization = &v
}

// GetTokenParameter returns the TokenParameter field value
func (o *UriSignatureOptions) GetTokenParameter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenParameter
}

// GetTokenParameterOk returns a tuple with the TokenParameter field value
// and a boolean to check if the value has been set.
func (o *UriSignatureOptions) GetTokenParameterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TokenParameter, true
}

// SetTokenParameter sets field value
func (o *UriSignatureOptions) SetTokenParameter(v string) {
	o.TokenParameter = v
}

func (o UriSignatureOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sharedSecretIndexParameter"] = o.SharedSecretIndexParameter
	}
	if true {
		toSerialize["inputParameterPattern"] = o.InputParameterPattern
	}
	if true {
		toSerialize["algorithm"] = o.Algorithm
	}
	if o.ProtectedPathPattern != nil {
		toSerialize["protectedPathPattern"] = o.ProtectedPathPattern
	}
	if true {
		toSerialize["sharedSecretSetId"] = o.SharedSecretSetId
	}
	if true {
		toSerialize["tokenEncoding"] = o.TokenEncoding
	}
	if true {
		toSerialize["uriExpirationParameter"] = o.UriExpirationParameter
	}
	if o.ProtectedSubFiles != nil {
		toSerialize["protectedSubFiles"] = o.ProtectedSubFiles
	}
	if o.InputParameterCapitalization != nil {
		toSerialize["inputParameterCapitalization"] = o.InputParameterCapitalization
	}
	if true {
		toSerialize["tokenParameter"] = o.TokenParameter
	}
	return json.Marshal(toSerialize)
}

type NullableUriSignatureOptions struct {
	value *UriSignatureOptions
	isSet bool
}

func (v NullableUriSignatureOptions) Get() *UriSignatureOptions {
	return v.value
}

func (v *NullableUriSignatureOptions) Set(val *UriSignatureOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableUriSignatureOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableUriSignatureOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUriSignatureOptions(val *UriSignatureOptions) *NullableUriSignatureOptions {
	return &NullableUriSignatureOptions{value: val, isSet: true}
}

func (v NullableUriSignatureOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUriSignatureOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


