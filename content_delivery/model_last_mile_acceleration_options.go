/*
content-delivery

Cotent Delivery API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package content_delivery

import (
	"encoding/json"
)

// LastMileAccelerationOptions This behavior's set of configuration options.
type LastMileAccelerationOptions struct {
	// GZIP compression level, 6 by default.
	CompressionLevel *int32 `json:"compressionLevel,omitempty"`
	// List of acceptable MIME-Types for which LMA is enabled.
	ContentTypes *[]string `json:"contentTypes,omitempty"`
	// Feature enable/disable, or `null` to inherit settings from the global HyperCache configuration.
	Enable *bool `json:"enable,omitempty"`
	// Regular expression match on the `User-Agent` header to disable LMA for particular clients.
	UaRestrict *string `json:"uaRestrict,omitempty"`
}

// NewLastMileAccelerationOptions instantiates a new LastMileAccelerationOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLastMileAccelerationOptions() *LastMileAccelerationOptions {
	this := LastMileAccelerationOptions{}
	var compressionLevel int32 = 6
	this.CompressionLevel = &compressionLevel
	return &this
}

// NewLastMileAccelerationOptionsWithDefaults instantiates a new LastMileAccelerationOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLastMileAccelerationOptionsWithDefaults() *LastMileAccelerationOptions {
	this := LastMileAccelerationOptions{}
	var compressionLevel int32 = 6
	this.CompressionLevel = &compressionLevel
	return &this
}

// GetCompressionLevel returns the CompressionLevel field value if set, zero value otherwise.
func (o *LastMileAccelerationOptions) GetCompressionLevel() int32 {
	if o == nil || o.CompressionLevel == nil {
		var ret int32
		return ret
	}
	return *o.CompressionLevel
}

// GetCompressionLevelOk returns a tuple with the CompressionLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LastMileAccelerationOptions) GetCompressionLevelOk() (*int32, bool) {
	if o == nil || o.CompressionLevel == nil {
		return nil, false
	}
	return o.CompressionLevel, true
}

// HasCompressionLevel returns a boolean if a field has been set.
func (o *LastMileAccelerationOptions) HasCompressionLevel() bool {
	if o != nil && o.CompressionLevel != nil {
		return true
	}

	return false
}

// SetCompressionLevel gets a reference to the given int32 and assigns it to the CompressionLevel field.
func (o *LastMileAccelerationOptions) SetCompressionLevel(v int32) {
	o.CompressionLevel = &v
}

// GetContentTypes returns the ContentTypes field value if set, zero value otherwise.
func (o *LastMileAccelerationOptions) GetContentTypes() []string {
	if o == nil || o.ContentTypes == nil {
		var ret []string
		return ret
	}
	return *o.ContentTypes
}

// GetContentTypesOk returns a tuple with the ContentTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LastMileAccelerationOptions) GetContentTypesOk() (*[]string, bool) {
	if o == nil || o.ContentTypes == nil {
		return nil, false
	}
	return o.ContentTypes, true
}

// HasContentTypes returns a boolean if a field has been set.
func (o *LastMileAccelerationOptions) HasContentTypes() bool {
	if o != nil && o.ContentTypes != nil {
		return true
	}

	return false
}

// SetContentTypes gets a reference to the given []string and assigns it to the ContentTypes field.
func (o *LastMileAccelerationOptions) SetContentTypes(v []string) {
	o.ContentTypes = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *LastMileAccelerationOptions) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LastMileAccelerationOptions) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *LastMileAccelerationOptions) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *LastMileAccelerationOptions) SetEnable(v bool) {
	o.Enable = &v
}

// GetUaRestrict returns the UaRestrict field value if set, zero value otherwise.
func (o *LastMileAccelerationOptions) GetUaRestrict() string {
	if o == nil || o.UaRestrict == nil {
		var ret string
		return ret
	}
	return *o.UaRestrict
}

// GetUaRestrictOk returns a tuple with the UaRestrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LastMileAccelerationOptions) GetUaRestrictOk() (*string, bool) {
	if o == nil || o.UaRestrict == nil {
		return nil, false
	}
	return o.UaRestrict, true
}

// HasUaRestrict returns a boolean if a field has been set.
func (o *LastMileAccelerationOptions) HasUaRestrict() bool {
	if o != nil && o.UaRestrict != nil {
		return true
	}

	return false
}

// SetUaRestrict gets a reference to the given string and assigns it to the UaRestrict field.
func (o *LastMileAccelerationOptions) SetUaRestrict(v string) {
	o.UaRestrict = &v
}

func (o LastMileAccelerationOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompressionLevel != nil {
		toSerialize["compressionLevel"] = o.CompressionLevel
	}
	if o.ContentTypes != nil {
		toSerialize["contentTypes"] = o.ContentTypes
	}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	if o.UaRestrict != nil {
		toSerialize["uaRestrict"] = o.UaRestrict
	}
	return json.Marshal(toSerialize)
}

type NullableLastMileAccelerationOptions struct {
	value *LastMileAccelerationOptions
	isSet bool
}

func (v NullableLastMileAccelerationOptions) Get() *LastMileAccelerationOptions {
	return v.value
}

func (v *NullableLastMileAccelerationOptions) Set(val *LastMileAccelerationOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableLastMileAccelerationOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableLastMileAccelerationOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLastMileAccelerationOptions(val *LastMileAccelerationOptions) *NullableLastMileAccelerationOptions {
	return &NullableLastMileAccelerationOptions{value: val, isSet: true}
}

func (v NullableLastMileAccelerationOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLastMileAccelerationOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


