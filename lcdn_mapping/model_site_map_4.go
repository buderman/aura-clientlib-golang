/*
lcdn-mapping

Aura LCDN Mapping API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lcdn_mapping

import (
	"encoding/json"
)

// SiteMap4 Site Map update schema.
type SiteMap4 struct {
	// The unique identifier for an entity.
	MapId int32 `json:"mapId"`
	// A unique name for the entity.
	Name string `json:"name"`
	// A description for the entity.
	Description *string `json:"description,omitempty"`
}

// NewSiteMap4 instantiates a new SiteMap4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteMap4(mapId int32, name string) *SiteMap4 {
	this := SiteMap4{}
	this.MapId = mapId
	this.Name = name
	return &this
}

// NewSiteMap4WithDefaults instantiates a new SiteMap4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteMap4WithDefaults() *SiteMap4 {
	this := SiteMap4{}
	return &this
}

// GetMapId returns the MapId field value
func (o *SiteMap4) GetMapId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value
// and a boolean to check if the value has been set.
func (o *SiteMap4) GetMapIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MapId, true
}

// SetMapId sets field value
func (o *SiteMap4) SetMapId(v int32) {
	o.MapId = v
}

// GetName returns the Name field value
func (o *SiteMap4) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SiteMap4) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SiteMap4) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SiteMap4) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMap4) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SiteMap4) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SiteMap4) SetDescription(v string) {
	o.Description = &v
}

func (o SiteMap4) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mapId"] = o.MapId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableSiteMap4 struct {
	value *SiteMap4
	isSet bool
}

func (v NullableSiteMap4) Get() *SiteMap4 {
	return v.value
}

func (v *NullableSiteMap4) Set(val *SiteMap4) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteMap4) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteMap4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteMap4(val *SiteMap4) *NullableSiteMap4 {
	return &NullableSiteMap4{value: val, isSet: true}
}

func (v NullableSiteMap4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteMap4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


