/*
infrastructure

Aura Infrastructure API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infrastructure

import (
	"encoding/json"
)

// Ip6AddressType An IPv6 address.
type Ip6AddressType struct {
	// An IPv6 address.
	IpAddress string `json:"ipAddress"`
}

// NewIp6AddressType instantiates a new Ip6AddressType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIp6AddressType(ipAddress string) *Ip6AddressType {
	this := Ip6AddressType{}
	this.IpAddress = ipAddress
	return &this
}

// NewIp6AddressTypeWithDefaults instantiates a new Ip6AddressType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIp6AddressTypeWithDefaults() *Ip6AddressType {
	this := Ip6AddressType{}
	return &this
}

// GetIpAddress returns the IpAddress field value
func (o *Ip6AddressType) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *Ip6AddressType) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *Ip6AddressType) SetIpAddress(v string) {
	o.IpAddress = v
}

func (o Ip6AddressType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ipAddress"] = o.IpAddress
	}
	return json.Marshal(toSerialize)
}

type NullableIp6AddressType struct {
	value *Ip6AddressType
	isSet bool
}

func (v NullableIp6AddressType) Get() *Ip6AddressType {
	return v.value
}

func (v *NullableIp6AddressType) Set(val *Ip6AddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableIp6AddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableIp6AddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIp6AddressType(val *Ip6AddressType) *NullableIp6AddressType {
	return &NullableIp6AddressType{value: val, isSet: true}
}

func (v NullableIp6AddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIp6AddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


