/*
infrastructure

Aura Infrastructure API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infrastructure

import (
	"encoding/json"
)

// BondInterfaceType A node bonding virtual interface.
type BondInterfaceType struct {
	// Interface MAC address.
	MacAddress *string `json:"macAddress,omitempty"`
	// Interface name, such as `lag0`.  Service nodes may use lag0 - lag3 for service bonding interfaces.  For management, a single bonding interface with the name lag_mgmt0 may be used.  Once created, this interface may not be deleted.
	Name string `json:"name"`
	Ip4Routes *[]Route4Type `json:"ip4Routes,omitempty"`
	Ip6Routes *[]Route6Type `json:"ip6Routes,omitempty"`
	// List of slave interfaces for this bond.
	SlaveInterfaces *[]string `json:"slaveInterfaces,omitempty"`
	Ip4Addresses *[]Ip4AddressType `json:"ip4Addresses,omitempty"`
	// Identifies the interface type. The only supported type is `BOND`.
	Type string `json:"type"`
	Ip6Addresses *[]Ip6AddressType `json:"ip6Addresses,omitempty"`
}

// NewBondInterfaceType instantiates a new BondInterfaceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBondInterfaceType(name string, type_ string) *BondInterfaceType {
	this := BondInterfaceType{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewBondInterfaceTypeWithDefaults instantiates a new BondInterfaceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBondInterfaceTypeWithDefaults() *BondInterfaceType {
	this := BondInterfaceType{}
	return &this
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *BondInterfaceType) GetMacAddress() string {
	if o == nil || o.MacAddress == nil {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInterfaceType) GetMacAddressOk() (*string, bool) {
	if o == nil || o.MacAddress == nil {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *BondInterfaceType) HasMacAddress() bool {
	if o != nil && o.MacAddress != nil {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *BondInterfaceType) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetName returns the Name field value
func (o *BondInterfaceType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BondInterfaceType) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BondInterfaceType) SetName(v string) {
	o.Name = v
}

// GetIp4Routes returns the Ip4Routes field value if set, zero value otherwise.
func (o *BondInterfaceType) GetIp4Routes() []Route4Type {
	if o == nil || o.Ip4Routes == nil {
		var ret []Route4Type
		return ret
	}
	return *o.Ip4Routes
}

// GetIp4RoutesOk returns a tuple with the Ip4Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInterfaceType) GetIp4RoutesOk() (*[]Route4Type, bool) {
	if o == nil || o.Ip4Routes == nil {
		return nil, false
	}
	return o.Ip4Routes, true
}

// HasIp4Routes returns a boolean if a field has been set.
func (o *BondInterfaceType) HasIp4Routes() bool {
	if o != nil && o.Ip4Routes != nil {
		return true
	}

	return false
}

// SetIp4Routes gets a reference to the given []Route4Type and assigns it to the Ip4Routes field.
func (o *BondInterfaceType) SetIp4Routes(v []Route4Type) {
	o.Ip4Routes = &v
}

// GetIp6Routes returns the Ip6Routes field value if set, zero value otherwise.
func (o *BondInterfaceType) GetIp6Routes() []Route6Type {
	if o == nil || o.Ip6Routes == nil {
		var ret []Route6Type
		return ret
	}
	return *o.Ip6Routes
}

// GetIp6RoutesOk returns a tuple with the Ip6Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInterfaceType) GetIp6RoutesOk() (*[]Route6Type, bool) {
	if o == nil || o.Ip6Routes == nil {
		return nil, false
	}
	return o.Ip6Routes, true
}

// HasIp6Routes returns a boolean if a field has been set.
func (o *BondInterfaceType) HasIp6Routes() bool {
	if o != nil && o.Ip6Routes != nil {
		return true
	}

	return false
}

// SetIp6Routes gets a reference to the given []Route6Type and assigns it to the Ip6Routes field.
func (o *BondInterfaceType) SetIp6Routes(v []Route6Type) {
	o.Ip6Routes = &v
}

// GetSlaveInterfaces returns the SlaveInterfaces field value if set, zero value otherwise.
func (o *BondInterfaceType) GetSlaveInterfaces() []string {
	if o == nil || o.SlaveInterfaces == nil {
		var ret []string
		return ret
	}
	return *o.SlaveInterfaces
}

// GetSlaveInterfacesOk returns a tuple with the SlaveInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInterfaceType) GetSlaveInterfacesOk() (*[]string, bool) {
	if o == nil || o.SlaveInterfaces == nil {
		return nil, false
	}
	return o.SlaveInterfaces, true
}

// HasSlaveInterfaces returns a boolean if a field has been set.
func (o *BondInterfaceType) HasSlaveInterfaces() bool {
	if o != nil && o.SlaveInterfaces != nil {
		return true
	}

	return false
}

// SetSlaveInterfaces gets a reference to the given []string and assigns it to the SlaveInterfaces field.
func (o *BondInterfaceType) SetSlaveInterfaces(v []string) {
	o.SlaveInterfaces = &v
}

// GetIp4Addresses returns the Ip4Addresses field value if set, zero value otherwise.
func (o *BondInterfaceType) GetIp4Addresses() []Ip4AddressType {
	if o == nil || o.Ip4Addresses == nil {
		var ret []Ip4AddressType
		return ret
	}
	return *o.Ip4Addresses
}

// GetIp4AddressesOk returns a tuple with the Ip4Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInterfaceType) GetIp4AddressesOk() (*[]Ip4AddressType, bool) {
	if o == nil || o.Ip4Addresses == nil {
		return nil, false
	}
	return o.Ip4Addresses, true
}

// HasIp4Addresses returns a boolean if a field has been set.
func (o *BondInterfaceType) HasIp4Addresses() bool {
	if o != nil && o.Ip4Addresses != nil {
		return true
	}

	return false
}

// SetIp4Addresses gets a reference to the given []Ip4AddressType and assigns it to the Ip4Addresses field.
func (o *BondInterfaceType) SetIp4Addresses(v []Ip4AddressType) {
	o.Ip4Addresses = &v
}

// GetType returns the Type field value
func (o *BondInterfaceType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BondInterfaceType) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BondInterfaceType) SetType(v string) {
	o.Type = v
}

// GetIp6Addresses returns the Ip6Addresses field value if set, zero value otherwise.
func (o *BondInterfaceType) GetIp6Addresses() []Ip6AddressType {
	if o == nil || o.Ip6Addresses == nil {
		var ret []Ip6AddressType
		return ret
	}
	return *o.Ip6Addresses
}

// GetIp6AddressesOk returns a tuple with the Ip6Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondInterfaceType) GetIp6AddressesOk() (*[]Ip6AddressType, bool) {
	if o == nil || o.Ip6Addresses == nil {
		return nil, false
	}
	return o.Ip6Addresses, true
}

// HasIp6Addresses returns a boolean if a field has been set.
func (o *BondInterfaceType) HasIp6Addresses() bool {
	if o != nil && o.Ip6Addresses != nil {
		return true
	}

	return false
}

// SetIp6Addresses gets a reference to the given []Ip6AddressType and assigns it to the Ip6Addresses field.
func (o *BondInterfaceType) SetIp6Addresses(v []Ip6AddressType) {
	o.Ip6Addresses = &v
}

func (o BondInterfaceType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MacAddress != nil {
		toSerialize["macAddress"] = o.MacAddress
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Ip4Routes != nil {
		toSerialize["ip4Routes"] = o.Ip4Routes
	}
	if o.Ip6Routes != nil {
		toSerialize["ip6Routes"] = o.Ip6Routes
	}
	if o.SlaveInterfaces != nil {
		toSerialize["slaveInterfaces"] = o.SlaveInterfaces
	}
	if o.Ip4Addresses != nil {
		toSerialize["ip4Addresses"] = o.Ip4Addresses
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Ip6Addresses != nil {
		toSerialize["ip6Addresses"] = o.Ip6Addresses
	}
	return json.Marshal(toSerialize)
}

type NullableBondInterfaceType struct {
	value *BondInterfaceType
	isSet bool
}

func (v NullableBondInterfaceType) Get() *BondInterfaceType {
	return v.value
}

func (v *NullableBondInterfaceType) Set(val *BondInterfaceType) {
	v.value = val
	v.isSet = true
}

func (v NullableBondInterfaceType) IsSet() bool {
	return v.isSet
}

func (v *NullableBondInterfaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBondInterfaceType(val *BondInterfaceType) *NullableBondInterfaceType {
	return &NullableBondInterfaceType{value: val, isSet: true}
}

func (v NullableBondInterfaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBondInterfaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


