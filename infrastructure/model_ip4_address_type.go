/*
infrastructure

Infrastructure API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infrastructure

import (
	"encoding/json"
)

// Ip4AddressType An IPv4 address.
type Ip4AddressType struct {
	// Indicates whether this is the management address.  There may only be one management address.
	Management *bool `json:"management,omitempty"`
	// An IPv4 address.
	IpAddress string `json:"ipAddress"`
}

// NewIp4AddressType instantiates a new Ip4AddressType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIp4AddressType(ipAddress string) *Ip4AddressType {
	this := Ip4AddressType{}
	var management bool = false
	this.Management = &management
	this.IpAddress = ipAddress
	return &this
}

// NewIp4AddressTypeWithDefaults instantiates a new Ip4AddressType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIp4AddressTypeWithDefaults() *Ip4AddressType {
	this := Ip4AddressType{}
	var management bool = false
	this.Management = &management
	return &this
}

// GetManagement returns the Management field value if set, zero value otherwise.
func (o *Ip4AddressType) GetManagement() bool {
	if o == nil || o.Management == nil {
		var ret bool
		return ret
	}
	return *o.Management
}

// GetManagementOk returns a tuple with the Management field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ip4AddressType) GetManagementOk() (*bool, bool) {
	if o == nil || o.Management == nil {
		return nil, false
	}
	return o.Management, true
}

// HasManagement returns a boolean if a field has been set.
func (o *Ip4AddressType) HasManagement() bool {
	if o != nil && o.Management != nil {
		return true
	}

	return false
}

// SetManagement gets a reference to the given bool and assigns it to the Management field.
func (o *Ip4AddressType) SetManagement(v bool) {
	o.Management = &v
}

// GetIpAddress returns the IpAddress field value
func (o *Ip4AddressType) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *Ip4AddressType) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *Ip4AddressType) SetIpAddress(v string) {
	o.IpAddress = v
}

func (o Ip4AddressType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Management != nil {
		toSerialize["management"] = o.Management
	}
	if true {
		toSerialize["ipAddress"] = o.IpAddress
	}
	return json.Marshal(toSerialize)
}

type NullableIp4AddressType struct {
	value *Ip4AddressType
	isSet bool
}

func (v NullableIp4AddressType) Get() *Ip4AddressType {
	return v.value
}

func (v *NullableIp4AddressType) Set(val *Ip4AddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableIp4AddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableIp4AddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIp4AddressType(val *Ip4AddressType) *NullableIp4AddressType {
	return &NullableIp4AddressType{value: val, isSet: true}
}

func (v NullableIp4AddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIp4AddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


