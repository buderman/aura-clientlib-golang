/*
infrastructure

Infrastructure API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infrastructure

import (
	"encoding/json"
)

// AttributeTypeRead Attribute type read schema.
type AttributeTypeRead struct {
	// The unique identifier for an attribute type.
	AttributeTypeId int32 `json:"attributeTypeId"`
	// The unique name for an attribute type.
	Name string `json:"name"`
}

// NewAttributeTypeRead instantiates a new AttributeTypeRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeTypeRead(attributeTypeId int32, name string) *AttributeTypeRead {
	this := AttributeTypeRead{}
	this.AttributeTypeId = attributeTypeId
	this.Name = name
	return &this
}

// NewAttributeTypeReadWithDefaults instantiates a new AttributeTypeRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeTypeReadWithDefaults() *AttributeTypeRead {
	this := AttributeTypeRead{}
	return &this
}

// GetAttributeTypeId returns the AttributeTypeId field value
func (o *AttributeTypeRead) GetAttributeTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AttributeTypeId
}

// GetAttributeTypeIdOk returns a tuple with the AttributeTypeId field value
// and a boolean to check if the value has been set.
func (o *AttributeTypeRead) GetAttributeTypeIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AttributeTypeId, true
}

// SetAttributeTypeId sets field value
func (o *AttributeTypeRead) SetAttributeTypeId(v int32) {
	o.AttributeTypeId = v
}

// GetName returns the Name field value
func (o *AttributeTypeRead) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AttributeTypeRead) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AttributeTypeRead) SetName(v string) {
	o.Name = v
}

func (o AttributeTypeRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attributeTypeId"] = o.AttributeTypeId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableAttributeTypeRead struct {
	value *AttributeTypeRead
	isSet bool
}

func (v NullableAttributeTypeRead) Get() *AttributeTypeRead {
	return v.value
}

func (v *NullableAttributeTypeRead) Set(val *AttributeTypeRead) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeTypeRead) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeTypeRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeTypeRead(val *AttributeTypeRead) *NullableAttributeTypeRead {
	return &NullableAttributeTypeRead{value: val, isSet: true}
}

func (v NullableAttributeTypeRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeTypeRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


