/*
infrastructure

Aura Infrastructure API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infrastructure

import (
	"encoding/json"
	"fmt"
)

// AdministrativeStateType The administrative state of the node, either `ACTIVE` or `MAINTENANCE`. The default is `ACTIVE`. Use `MAINTENANCE` to remove a node from service, do routine software maintenance, or add or remove storage devices on a service node.
type AdministrativeStateType string

// List of administrativeStateType
const (
	ADMINISTRATIVESTATETYPE_ACTIVE AdministrativeStateType = "ACTIVE"
	ADMINISTRATIVESTATETYPE_MAINTENANCE AdministrativeStateType = "MAINTENANCE"
)

// All allowed values of AdministrativeStateType enum
var AllowedAdministrativeStateTypeEnumValues = []AdministrativeStateType{
	"ACTIVE",
	"MAINTENANCE",
}

func (v *AdministrativeStateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdministrativeStateType(value)
	for _, existing := range AllowedAdministrativeStateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdministrativeStateType", value)
}

// NewAdministrativeStateTypeFromValue returns a pointer to a valid AdministrativeStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdministrativeStateTypeFromValue(v string) (*AdministrativeStateType, error) {
	ev := AdministrativeStateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdministrativeStateType: valid values are %v", v, AllowedAdministrativeStateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdministrativeStateType) IsValid() bool {
	for _, existing := range AllowedAdministrativeStateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to administrativeStateType value
func (v AdministrativeStateType) Ptr() *AdministrativeStateType {
	return &v
}

type NullableAdministrativeStateType struct {
	value *AdministrativeStateType
	isSet bool
}

func (v NullableAdministrativeStateType) Get() *AdministrativeStateType {
	return v.value
}

func (v *NullableAdministrativeStateType) Set(val *AdministrativeStateType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministrativeStateType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministrativeStateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministrativeStateType(val *AdministrativeStateType) *NullableAdministrativeStateType {
	return &NullableAdministrativeStateType{value: val, isSet: true}
}

func (v NullableAdministrativeStateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministrativeStateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

