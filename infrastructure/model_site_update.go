/*
infrastructure

Aura Infrastructure API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infrastructure

import (
	"encoding/json"
)

// SiteUpdate Site update schema.
type SiteUpdate struct {
	// The unique identifier for a site.
	SiteId int32 `json:"siteId"`
	// The unique name for this site.
	Name string `json:"name"`
	// A shortened name for this site.
	AbbreviatedName string `json:"abbreviatedName"`
}

// NewSiteUpdate instantiates a new SiteUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteUpdate(siteId int32, name string, abbreviatedName string) *SiteUpdate {
	this := SiteUpdate{}
	this.SiteId = siteId
	this.Name = name
	this.AbbreviatedName = abbreviatedName
	return &this
}

// NewSiteUpdateWithDefaults instantiates a new SiteUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteUpdateWithDefaults() *SiteUpdate {
	this := SiteUpdate{}
	return &this
}

// GetSiteId returns the SiteId field value
func (o *SiteUpdate) GetSiteId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *SiteUpdate) GetSiteIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *SiteUpdate) SetSiteId(v int32) {
	o.SiteId = v
}

// GetName returns the Name field value
func (o *SiteUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SiteUpdate) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SiteUpdate) SetName(v string) {
	o.Name = v
}

// GetAbbreviatedName returns the AbbreviatedName field value
func (o *SiteUpdate) GetAbbreviatedName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AbbreviatedName
}

// GetAbbreviatedNameOk returns a tuple with the AbbreviatedName field value
// and a boolean to check if the value has been set.
func (o *SiteUpdate) GetAbbreviatedNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AbbreviatedName, true
}

// SetAbbreviatedName sets field value
func (o *SiteUpdate) SetAbbreviatedName(v string) {
	o.AbbreviatedName = v
}

func (o SiteUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["siteId"] = o.SiteId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["abbreviatedName"] = o.AbbreviatedName
	}
	return json.Marshal(toSerialize)
}

type NullableSiteUpdate struct {
	value *SiteUpdate
	isSet bool
}

func (v NullableSiteUpdate) Get() *SiteUpdate {
	return v.value
}

func (v *NullableSiteUpdate) Set(val *SiteUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteUpdate(val *SiteUpdate) *NullableSiteUpdate {
	return &NullableSiteUpdate{value: val, isSet: true}
}

func (v NullableSiteUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


