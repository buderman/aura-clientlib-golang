/*
infrastructure

Infrastructure API

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infrastructure

import (
	"encoding/json"
)

// NodeCollection Node collection.
type NodeCollection struct {
	Nodes []Node1 `json:"nodes"`
	Page PageType `json:"page"`
}

// NewNodeCollection instantiates a new NodeCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeCollection(nodes []Node1, page PageType) *NodeCollection {
	this := NodeCollection{}
	this.Nodes = nodes
	this.Page = page
	return &this
}

// NewNodeCollectionWithDefaults instantiates a new NodeCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeCollectionWithDefaults() *NodeCollection {
	this := NodeCollection{}
	return &this
}

// GetNodes returns the Nodes field value
func (o *NodeCollection) GetNodes() []Node1 {
	if o == nil {
		var ret []Node1
		return ret
	}

	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value
// and a boolean to check if the value has been set.
func (o *NodeCollection) GetNodesOk() (*[]Node1, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Nodes, true
}

// SetNodes sets field value
func (o *NodeCollection) SetNodes(v []Node1) {
	o.Nodes = v
}

// GetPage returns the Page field value
func (o *NodeCollection) GetPage() PageType {
	if o == nil {
		var ret PageType
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *NodeCollection) GetPageOk() (*PageType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *NodeCollection) SetPage(v PageType) {
	o.Page = v
}

func (o NodeCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["nodes"] = o.Nodes
	}
	if true {
		toSerialize["page"] = o.Page
	}
	return json.Marshal(toSerialize)
}

type NullableNodeCollection struct {
	value *NodeCollection
	isSet bool
}

func (v NullableNodeCollection) Get() *NodeCollection {
	return v.value
}

func (v *NullableNodeCollection) Set(val *NodeCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeCollection(val *NodeCollection) *NullableNodeCollection {
	return &NullableNodeCollection{value: val, isSet: true}
}

func (v NullableNodeCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


